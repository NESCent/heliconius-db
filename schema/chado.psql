--
-- PostgreSQL database dump
--

SET client_encoding = 'SQL_ASCII';
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: godb; Type: SCHEMA; Schema: -; Owner: nassar
--

CREATE SCHEMA godb;


--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: 
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: feature_by_fx_type; Type: TYPE; Schema: public; Owner: nassar
--

CREATE TYPE feature_by_fx_type AS (
	feature_id integer,
	depth integer
);


--
-- Name: soi_type; Type: TYPE; Schema: public; Owner: nassar
--

CREATE TYPE soi_type AS (
	type_id integer,
	subject_id integer,
	object_id integer
);


--
-- Name: _fill_cvtermpath4node(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION _fill_cvtermpath4node(integer, integer, integer, integer, integer) RETURNS integer
    AS $_$
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm cvterm_relationship%ROWTYPE;
    exist_c int;

BEGIN

    --- RAISE NOTICE 'depth=% root=%', depth,child_id;
    --- not check type_id as it may be null and not very meaningful in cvtermpath when pathdistance > 1
    SELECT INTO exist_c count(*) FROM cvtermpath WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id AND pathdistance = depth;

    IF (exist_c = 0) THEN
        INSERT INTO cvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(origin, child_id, cvid, typeid, depth);
    END IF;
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = child_id LOOP
        PERFORM _fill_cvtermpath4node(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
    END LOOP;
    RETURN 1;
END;
$_$
    LANGUAGE plpgsql;


--
-- Name: _fill_cvtermpath4node2detect_cycle(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION _fill_cvtermpath4node2detect_cycle(integer, integer, integer, integer, integer) RETURNS integer
    AS $_$
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm cvterm_relationship%ROWTYPE;
    exist_c int;
    ccount  int;
    ecount  int;
    rtn     int;
BEGIN

    EXECUTE 'SELECT * FROM tmpcvtermpath p1, tmpcvtermpath p2 WHERE p1.subject_id=p2.object_id AND p1.object_id=p2.subject_id AND p1.object_id = '|| origin || ' AND p2.subject_id = ' || child_id || 'AND ' || depth || '> 0';
    GET DIAGNOSTICS ccount = ROW_COUNT;
    IF (ccount > 0) THEN
        --RAISE EXCEPTION 'FOUND CYCLE: node % on cycle path',origin;
        RETURN origin;
    END IF;

    EXECUTE 'SELECT * FROM tmpcvtermpath WHERE cv_id = ' || cvid || ' AND object_id = ' || origin || ' AND subject_id = ' || child_id || ' AND ' || origin || '<>' || child_id;
    GET DIAGNOSTICS ecount = ROW_COUNT;
    IF (ecount > 0) THEN
        --RAISE NOTICE 'FOUND TWICE (node), will check root obj % subj %',origin, child_id;
        SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(child_id, cvid);
        IF (rtn > 0) THEN
            RETURN rtn;
        END IF;
    END IF;

    EXECUTE 'SELECT * FROM tmpcvtermpath WHERE cv_id = ' || cvid || ' AND object_id = ' || origin || ' AND subject_id = ' || child_id || ' AND pathdistance = ' || depth;
    GET DIAGNOSTICS exist_c = ROW_COUNT;
    IF (exist_c = 0) THEN
        EXECUTE 'INSERT INTO tmpcvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(' || origin || ', ' || child_id || ', ' || cvid || ', ' || typeid || ', ' || depth || ')';
    END IF;

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = child_id LOOP
        --RAISE NOTICE 'DOING for node, % %', origin, cterm.subject_id;
        SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
        IF (rtn > 0) THEN
            RETURN rtn;
        END IF;
    END LOOP;
    RETURN 0;
END;
$_$
    LANGUAGE plpgsql;


--
-- Name: _fill_cvtermpath4root(integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION _fill_cvtermpath4root(integer, integer) RETURNS integer
    AS $_$
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype int;
    cterm cvterm_relationship%ROWTYPE;
    child cvterm_relationship%ROWTYPE;

BEGIN

    SELECT INTO ttype cvterm_id FROM cvterm WHERE (name = 'isa' OR name = 'is_a');
    PERFORM _fill_cvtermpath4node(rootid, rootid, cvid, ttype, 0);
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = rootid LOOP
        PERFORM _fill_cvtermpath4root(cterm.subject_id, cvid);
        -- RAISE NOTICE 'DONE for term, %', cterm.subject_id;
    END LOOP;
    RETURN 1;
END;
$_$
    LANGUAGE plpgsql;


--
-- Name: _fill_cvtermpath4root2detect_cycle(integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION _fill_cvtermpath4root2detect_cycle(integer, integer) RETURNS integer
    AS $_$
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype int;
    ccount int;
    cterm cvterm_relationship%ROWTYPE;
    child cvterm_relationship%ROWTYPE;
    rtn     int;
BEGIN

    SELECT INTO ttype cvterm_id FROM cvterm WHERE (name = 'isa' OR name = 'is_a');
    SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(rootid, rootid, cvid, ttype, 0);
    IF (rtn > 0) THEN
        RETURN rtn;
    END IF;
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = rootid LOOP
        EXECUTE 'SELECT * FROM tmpcvtermpath p1, tmpcvtermpath p2 WHERE p1.subject_id=p2.object_id AND p1.object_id=p2.subject_id AND p1.object_id=' || rootid || ' AND p1.subject_id=' || cterm.subject_id;
        GET DIAGNOSTICS ccount = ROW_COUNT;
        IF (ccount > 0) THEN
            --RAISE NOTICE 'FOUND TWICE (root), will check root obj % subj %',rootid,cterm.subject_id;
            SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(rootid, cterm.subject_id, cvid, ttype, 0);
            IF (rtn > 0) THEN
                RETURN rtn;
            END IF;
        ELSE
            SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(cterm.subject_id, cvid);
            IF (rtn > 0) THEN
                RETURN rtn;
            END IF;
        END IF;
    END LOOP;
    RETURN 0;
END;
$_$
    LANGUAGE plpgsql;


--
-- Name: _fill_cvtermpath4soi(integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION _fill_cvtermpath4soi(integer, integer) RETURNS integer
    AS $_$
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype int;
    cterm soi_type%ROWTYPE;

BEGIN
    
    SELECT INTO ttype cvterm_id FROM cvterm WHERE name = 'isa';
    --RAISE NOTICE 'got ttype %',ttype;
    PERFORM _fill_cvtermpath4soinode(rootid, rootid, cvid, ttype, 0);
    FOR cterm IN SELECT tmp_type AS type_id, subject_id FROM tmpcvtr WHERE object_id = rootid LOOP
        PERFORM _fill_cvtermpath4soi(cterm.subject_id, cvid);
    END LOOP;
    RETURN 1;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: _fill_cvtermpath4soinode(integer, integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION _fill_cvtermpath4soinode(integer, integer, integer, integer, integer) RETURNS integer
    AS $_$
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm soi_type%ROWTYPE;
    exist_c int;

BEGIN

    --RAISE NOTICE 'depth=% o=%, root=%, cv=%, t=%', depth,origin,child_id,cvid,typeid;
    SELECT INTO exist_c count(*) FROM cvtermpath WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id AND pathdistance = depth;
    --- longest path
    IF (exist_c > 0) THEN
        UPDATE cvtermpath SET pathdistance = depth WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id;
    ELSE
        INSERT INTO cvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(origin, child_id, cvid, typeid, depth);
    END IF;

    FOR cterm IN SELECT tmp_type AS type_id, subject_id FROM tmpcvtr WHERE object_id = child_id LOOP
        PERFORM _fill_cvtermpath4soinode(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
    END LOOP;
    RETURN 1;
END;
$_$
    LANGUAGE plpgsql;


SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: cvtermpath; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE cvtermpath (
    cvtermpath_id serial NOT NULL,
    type_id integer,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    cv_id integer NOT NULL,
    pathdistance integer
);


--
-- Name: TABLE cvtermpath; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE cvtermpath IS 'The reflexive transitive closure of the cvterm_relationship relation. For a full discussion, see the file populating-cvtermpath.txt in this directory';


--
-- Name: COLUMN cvtermpath.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvtermpath.type_id IS 'The relationship type that this is a closure over. If null, then this is a closure over ALL relationship types. If non-null, then this references a relationship cvterm - note that the closure will apply to both this relationship AND the OBO_REL:is_a (subclass) relationship';


--
-- Name: COLUMN cvtermpath.cv_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvtermpath.cv_id IS 'Closures will mostly be within one cv. If the closure of a relationship traverses a cv, then this refers to the cv of the object_id cvterm';


--
-- Name: COLUMN cvtermpath.pathdistance; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvtermpath.pathdistance IS 'The number of steps required to get from the subject cvterm to the object cvterm, counting from zero (reflexive relationship)';


--
-- Name: _get_all_object_ids(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION _get_all_object_ids(integer) RETURNS SETOF cvtermpath
    AS $_$
DECLARE
    leaf alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;
BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM _get_all_object_ids(cterm.object_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: _get_all_subject_ids(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION _get_all_subject_ids(integer) RETURNS SETOF cvtermpath
    AS $_$
DECLARE
    root alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;
BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = root LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM _get_all_subject_ids(cterm.subject_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: boxquery(integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION boxquery(integer, integer) RETURNS box
    AS $_$SELECT box (p($1, $2), p($1, $2))$_$
    LANGUAGE sql IMMUTABLE;


--
-- Name: boxrange(integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION boxrange(integer, integer) RETURNS box
    AS $_$SELECT box (p(0, $1), p($2,500000000))$_$
    LANGUAGE sql IMMUTABLE;


--
-- Name: create_soi(); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION create_soi() RETURNS integer
    AS $$
DECLARE
    parent soi_type%ROWTYPE;
    isa_id cvterm.cvterm_id%TYPE;
    soi_term TEXT := 'soi';
    soi_def TEXT := 'ontology of SO feature instantiated in database';
    soi_cvid INTEGER;
    soiterm_id INTEGER;
    pcount INTEGER;
    count INTEGER := 0;
    cquery TEXT;
BEGIN

    SELECT INTO isa_id cvterm_id FROM cvterm WHERE name = 'isa';

    SELECT INTO soi_cvid cv_id FROM cv WHERE name = soi_term;
    IF (soi_cvid > 0) THEN
        DELETE FROM cvtermpath WHERE cv_id = soi_cvid;
        DELETE FROM cvterm WHERE cv_id = soi_cvid;
    ELSE
        INSERT INTO cv (name, definition) VALUES(soi_term, soi_def);
    END IF;
    SELECT INTO soi_cvid cv_id FROM cv WHERE name = soi_term;
    INSERT INTO cvterm (name, cv_id) VALUES(soi_term, soi_cvid);
    SELECT INTO soiterm_id cvterm_id FROM cvterm WHERE name = soi_term;

    CREATE TEMP TABLE tmpcvtr (tmp_type INT, type_id INT, subject_id INT, object_id INT);
    CREATE UNIQUE INDEX u_tmpcvtr ON tmpcvtr(subject_id, object_id);

    INSERT INTO tmpcvtr (tmp_type, type_id, subject_id, object_id)
        SELECT DISTINCT isa_id, soiterm_id, f.type_id, soiterm_id FROM feature f, cvterm t
        WHERE f.type_id = t.cvterm_id AND f.type_id > 0;
    EXECUTE 'select * from tmpcvtr where type_id = ' || soiterm_id || ';';
    get diagnostics pcount = row_count;
    raise notice 'all types in feature %',pcount;
--- do it hard way, delete any child feature type from above (NOT IN clause did not work)
    FOR parent IN SELECT DISTINCT 0, t.cvterm_id, 0 FROM feature c, feature_relationship fr, cvterm t
            WHERE t.cvterm_id = c.type_id AND c.feature_id = fr.subject_id LOOP
        DELETE FROM tmpcvtr WHERE type_id = soiterm_id and object_id = soiterm_id
            AND subject_id = parent.subject_id;
    END LOOP;
    EXECUTE 'select * from tmpcvtr where type_id = ' || soiterm_id || ';';
    get diagnostics pcount = row_count;
    raise notice 'all types in feature after delete child %',pcount;

    --- create feature type relationship (store in tmpcvtr)
    CREATE TEMP TABLE tmproot (cv_id INTEGER not null, cvterm_id INTEGER not null, status INTEGER DEFAULT 0);
    cquery := 'SELECT * FROM tmproot tmp WHERE tmp.status = 0;';
    ---temp use tmpcvtr to hold instantiated SO relationship for speed
    ---use soterm_id as type_id, will delete from tmpcvtr
    ---us tmproot for this as well
    INSERT INTO tmproot (cv_id, cvterm_id, status) SELECT DISTINCT soi_cvid, c.subject_id, 0 FROM tmpcvtr c
        WHERE c.object_id = soiterm_id;
    EXECUTE cquery;
    GET DIAGNOSTICS pcount = ROW_COUNT;
    WHILE (pcount > 0) LOOP
        RAISE NOTICE 'num child temp (to be inserted) in tmpcvtr: %',pcount;
        INSERT INTO tmpcvtr (tmp_type, type_id, subject_id, object_id)
            SELECT DISTINCT fr.type_id, soiterm_id, c.type_id, p.cvterm_id FROM feature c, feature_relationship fr,
            tmproot p, feature pf, cvterm t WHERE c.feature_id = fr.subject_id AND fr.object_id = pf.feature_id
            AND p.cvterm_id = pf.type_id AND t.cvterm_id = c.type_id AND p.status = 0;
        UPDATE tmproot SET status = 1 WHERE status = 0;
        INSERT INTO tmproot (cv_id, cvterm_id, status)
            SELECT DISTINCT soi_cvid, c.type_id, 0 FROM feature c, feature_relationship fr,
            tmproot tmp, feature p, cvterm t WHERE c.feature_id = fr.subject_id AND fr.object_id = p.feature_id
            AND tmp.cvterm_id = p.type_id AND t.cvterm_id = c.type_id AND tmp.status = 1;
        UPDATE tmproot SET status = 2 WHERE status = 1;
        EXECUTE cquery;
        GET DIAGNOSTICS pcount = ROW_COUNT; 
    END LOOP;
    DELETE FROM tmproot;

    ---get transitive closure for soi
    PERFORM _fill_cvtermpath4soi(soiterm_id, soi_cvid);

    DROP TABLE tmpcvtr;
    DROP TABLE tmproot;

    RETURN 1;
END;
$$
    LANGUAGE plpgsql;


--
-- Name: featureloc; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE featureloc (
    featureloc_id serial NOT NULL,
    feature_id integer NOT NULL,
    srcfeature_id integer,
    fmin integer,
    is_fmin_partial boolean DEFAULT false NOT NULL,
    fmax integer,
    is_fmax_partial boolean DEFAULT false NOT NULL,
    strand smallint,
    phase integer,
    residue_info text,
    locgroup integer DEFAULT 0 NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    CONSTRAINT featureloc_c2 CHECK ((fmin <= fmax))
);


--
-- Name: TABLE featureloc; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE featureloc IS 'The location of a feature relative to
another feature.  IMPORTANT: INTERBASE COORDINATES ARE USED.(This is
vital as it allows us to represent zero-length features eg splice
sites, insertion points without an awkward fuzzy system). Features
typically have exactly ONE location, but this need not be the
case. Some features may not be localized (eg a gene that has been
characterized genetically but no sequence/molecular info is
available). NOTE ON MULTIPLE LOCATIONS: Each feature can have 0 or
more locations. Multiple locations do NOT indicate non-contiguous
locations (if a feature such as a transcript has a non-contiguous
location, then the subfeatures such as exons should always be
manifested). Instead, multiple featurelocs for a feature designate
alternate locations or grouped locations; for instance, a feature
designating a blast hit or hsp will have two locations, one on the
query feature, one on the subject feature.  features representing
sequence variation could have alternate locations instantiated on a
feature on the mutant strain.  the column:rank is used to
differentiate these different locations. Reflexive locations should
never be stored - this is for -proper- (ie non-self) locations only;
i.e. nothing should be located relative to itself';


--
-- Name: COLUMN featureloc.srcfeature_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.srcfeature_id IS 'The source feature which this location is relative to. Every location is relative to another feature (however, this column is nullable, because the srcfeature may not be known). All locations are -proper- that is, nothing should be located relative to itself. No cycles are allowed in the featureloc graph';


--
-- Name: COLUMN featureloc.fmin; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.fmin IS 'The leftmost/minimal boundary in the linear range represented by the featureloc. Sometimes (eg in bioperl) this is called -start- although this is confusing because it does not necessarily represent the 5-prime coordinate. IMPORTANT: This is space-based (INTERBASE) coordinates, counting from zero. To convert this to the leftmost position in a base-oriented system (eg GFF, bioperl), add 1 to fmin';


--
-- Name: COLUMN featureloc.is_fmin_partial; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.is_fmin_partial IS 'This is typically
false, but may be true if the value for column:fmin is inaccurate or
the leftmost part of the range is unknown/unbounded';


--
-- Name: COLUMN featureloc.fmax; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.fmax IS 'The rightmost/maximal boundary in the linear range represented by the featureloc. Sometimes (eg in bioperl) this is called -end- although this is confusing because it does not necessarily represent the 3-prime coordinate. IMPORTANT: This is space-based (INTERBASE) coordinates, counting from zero. No conversion is required to go from fmax to the rightmost coordinate in a base-oriented system that counts from 1 (eg GFF, bioperl)';


--
-- Name: COLUMN featureloc.is_fmax_partial; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.is_fmax_partial IS 'This is typically
false, but may be true if the value for column:fmax is inaccurate or
the rightmost part of the range is unknown/unbounded';


--
-- Name: COLUMN featureloc.strand; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.strand IS 'The orientation/directionality of the
location. Should be 0,-1 or +1';


--
-- Name: COLUMN featureloc.phase; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.phase IS 'phase of translation wrt srcfeature_id.
Values are 0,1,2. It may not be possible to manifest this column for
some features such as exons, because the phase is dependant on the
spliceform (the same exon can appear in multiple spliceforms). This column is mostly useful for predicted exons and CDSs';


--
-- Name: COLUMN featureloc.residue_info; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.residue_info IS 'Alternative residues,
when these differ from feature.residues. for instance, a SNP feature
located on a wild and mutant protein would have different alresidues.
for alignment/similarity features, the altresidues is used to
represent the alignment string (CIGAR format). Note on variation
features; even if we dont want to instantiate a mutant
chromosome/contig feature, we can still represent a SNP etc with 2
locations, one (rank 0) on the genome, the other (rank 1) would have
most fields null, except for altresidues';


--
-- Name: COLUMN featureloc.locgroup; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.locgroup IS 'This is used to manifest redundant,
derivable extra locations for a feature. The default locgroup=0 is
used for the DIRECT location of a feature. !! MOST CHADO USERS MAY
NEVER USE featurelocs WITH logroup>0 !! Transitively derived locations
are indicated with locgroup>0. For example, the position of an exon on
a BAC and in global chromosome coordinates. This column is used to
differentiate these groupings of locations. the default locgroup 0
is used for the main/primary location, from which the others can be
derived via coordinate transformations. another example of redundant
locations is storing ORF coordinates relative to both transcript and
genome. redundant locations open the possibility of the database
getting into inconsistent states; this schema gives us the flexibility
of both warehouse instantiations with redundant locations (easier for
querying) and management instantiations with no redundant
locations. An example of using both locgroup and rank: imagine a
feature indicating a conserved region between the chromosomes of two
different species. we may want to keep redundant locations on both
contigs and chromosomes. we would thus have 4 locations for the single
conserved region feature - two distinct locgroups (contig level and
chromosome level) and two distinct ranks (for the two species)';


--
-- Name: COLUMN featureloc.rank; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureloc.rank IS 'Used when a feature has >1
location, otherwise the default rank 0 is used. Some features (eg
blast hits and HSPs) have two locations - one on the query and one on
the subject. Rank is used to differentiate these. Rank=0 is always
used for the query, Rank=1 for the subject. For multiple alignments,
assignment of rank is arbitrary. Rank is also used for
sequence_variant features, such as SNPs. Rank=0 indicates the wildtype
(or baseline) feature, Rank=1 indicates the mutant (or compared) feature';


--
-- Name: feature_subalignments(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION feature_subalignments(integer) RETURNS SETOF featureloc
    AS $_$
DECLARE
  return_data featureloc%ROWTYPE;
  f_id ALIAS FOR $1;
  feature_data feature%rowtype;
  featureloc_data featureloc%rowtype;

  s text;

  fmin integer;
  slen integer;
BEGIN
  --RAISE NOTICE 'feature_id is %', featureloc_data.feature_id;
  SELECT INTO feature_data * FROM feature WHERE feature_id = f_id;

  FOR featureloc_data IN SELECT * FROM featureloc WHERE feature_id = f_id LOOP

    --RAISE NOTICE 'fmin is %', featureloc_data.fmin;

    return_data.feature_id      = f_id;
    return_data.srcfeature_id   = featureloc_data.srcfeature_id;
    return_data.is_fmin_partial = featureloc_data.is_fmin_partial;
    return_data.is_fmax_partial = featureloc_data.is_fmax_partial;
    return_data.strand          = featureloc_data.strand;
    return_data.phase           = featureloc_data.phase;
    return_data.residue_info    = featureloc_data.residue_info;
    return_data.locgroup        = featureloc_data.locgroup;
    return_data.rank            = featureloc_data.rank;

    s = feature_data.residues;
    fmin = featureloc_data.fmin;
    slen = char_length(s);

    WHILE char_length(s) LOOP
      --RAISE NOTICE 'residues is %', s;

      --trim off leading match
      s = trim(leading '|ATCGNatcgn' from s);
      --if leading match detected
      IF slen > char_length(s) THEN
        return_data.fmin = fmin;
        return_data.fmax = featureloc_data.fmin + (slen - char_length(s));

        --if the string started with a match, return it,
        --otherwise, trim the gaps first (ie do not return this iteration)
        RETURN NEXT return_data;
      END IF;

      --trim off leading gap
      s = trim(leading '-' from s);

      fmin = featureloc_data.fmin + (slen - char_length(s));
    END LOOP;
  END LOOP;

  RETURN;

END;
$_$
    LANGUAGE plpgsql;


--
-- Name: featureslice(integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION featureslice(integer, integer) RETURNS SETOF featureloc
    AS $_$SELECT * from featureloc where boxquery($1, $2) @ boxrange(fmin,fmax)$_$
    LANGUAGE sql;


--
-- Name: fill_cvtermpath(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION fill_cvtermpath(integer) RETURNS integer
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;

BEGIN

    DELETE FROM cvtermpath WHERE cv_id = cvid;

    FOR root IN SELECT DISTINCT t.* from cvterm t LEFT JOIN cvterm_relationship r ON (t.cvterm_id = r.subject_id) INNER JOIN cvterm_relationship r2 ON (t.cvterm_id = r2.object_id) WHERE t.cv_id = cvid AND r.subject_id is null LOOP
        PERFORM _fill_cvtermpath4root(root.cvterm_id, root.cv_id);
    END LOOP;
    RETURN 1;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: fill_cvtermpath(character varying); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION fill_cvtermpath(character varying) RETURNS integer
    AS $_$
DECLARE
    cvname alias for $1;
    cv_id   int;
    rtn     int;
BEGIN

    SELECT INTO cv_id cv.cv_id from cv WHERE cv.name = cvname;
    SELECT INTO rtn fill_cvtermpath(cv_id);
    RETURN rtn;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: get_all_object_ids(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION get_all_object_ids(integer) RETURNS SETOF cvtermpath
    AS $_$
DECLARE
    leaf alias for $1;
    cterm cvtermpath%ROWTYPE;
    exist_c int;
BEGIN


    SELECT INTO exist_c count(*) FROM cvtermpath WHERE object_id = leaf and pathdistance <= 0;
    IF (exist_c > 0) THEN
        FOR cterm IN SELECT * FROM cvtermpath WHERE subject_id = leaf AND pathdistance > 0 LOOP
            RETURN NEXT cterm;
        END LOOP;
    ELSE
        FOR cterm IN SELECT * FROM _get_all_object_ids(leaf) LOOP
            RETURN NEXT cterm;
        END LOOP;
    END IF;
    RETURN;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: get_all_subject_ids(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION get_all_subject_ids(integer) RETURNS SETOF cvtermpath
    AS $_$
DECLARE
    root alias for $1;
    cterm cvtermpath%ROWTYPE;
    exist_c int;
BEGIN

    SELECT INTO exist_c count(*) FROM cvtermpath WHERE object_id = root and pathdistance <= 0;
    IF (exist_c > 0) THEN
        FOR cterm IN SELECT * FROM cvtermpath WHERE object_id = root and pathdistance > 0 LOOP
            RETURN NEXT cterm;
        END LOOP;
    ELSE
        FOR cterm IN SELECT * FROM _get_all_subject_ids(root) LOOP
            RETURN NEXT cterm;
        END LOOP;
    END IF;
    RETURN;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: get_cycle_cvterm_id(integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION get_cycle_cvterm_id(integer, integer) RETURNS integer
    AS $_$
DECLARE
    cvid alias for $1;
    rootid alias for $2;
    rtn     int;
BEGIN

    CREATE TEMP TABLE tmpcvtermpath(object_id int, subject_id int, cv_id int, type_id int, pathdistance int);
    CREATE INDEX tmp_cvtpath1 ON tmpcvtermpath(object_id, subject_id);

    SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(rootid, cvid);
    IF (rtn > 0) THEN
        DROP TABLE tmpcvtermpath;
        RETURN rtn;
    END IF;
    DROP TABLE tmpcvtermpath;
    RETURN 0;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: get_cycle_cvterm_id(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION get_cycle_cvterm_id(integer) RETURNS integer
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;
    rtn     int;
BEGIN

    CREATE TEMP TABLE tmpcvtermpath(object_id int, subject_id int, cv_id int, type_id int, pathdistance int);
    CREATE INDEX tmp_cvtpath1 ON tmpcvtermpath(object_id, subject_id);

    FOR root IN SELECT DISTINCT t.* from cvterm t LEFT JOIN cvterm_relationship r ON (t.cvterm_id = r.subject_id) INNER JOIN cvterm_relationship r2 ON (t.cvterm_id = r2.object_id) WHERE t.cv_id = cvid AND r.subject_id is null LOOP
        SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(root.cvterm_id, root.cv_id);
        IF (rtn > 0) THEN
            DROP TABLE tmpcvtermpath;
            RETURN rtn;
        END IF;
    END LOOP;
    DROP TABLE tmpcvtermpath;
    RETURN 0;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: get_cycle_cvterm_id(character varying); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION get_cycle_cvterm_id(character varying) RETURNS integer
    AS $_$
DECLARE
    cvname alias for $1;
    cv_id int;
    rtn int;
BEGIN

    SELECT INTO cv_id cv.cv_id from cv WHERE cv.name = cvname;
    SELECT INTO rtn  get_cycle_cvterm_id(cv_id);

    RETURN rtn;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: get_cycle_cvterm_ids(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION get_cycle_cvterm_ids(integer) RETURNS SETOF integer
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;
    rtn     int;
BEGIN


    FOR root IN SELECT DISTINCT t.* from cvterm t WHERE cv_id = cvid LOOP
        SELECT INTO rtn get_cycle_cvterm_id(cvid,root.cvterm_id);
        IF (rtn > 0) THEN
            RETURN NEXT rtn;
        END IF;
    END LOOP;
    RETURN;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: get_graph_above(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION get_graph_above(integer) RETURNS SETOF cvtermpath
    AS $_$
DECLARE
    leaf alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;

BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE subject_id = leaf LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM get_all_object_ids(cterm.object_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: get_graph_below(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION get_graph_below(integer) RETURNS SETOF cvtermpath
    AS $_$
DECLARE
    root alias for $1;
    cterm cvtermpath%ROWTYPE;
    cterm2 cvtermpath%ROWTYPE;

BEGIN

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = root LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT * FROM get_all_subject_ids(cterm.subject_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: cvterm; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE cvterm (
    cvterm_id serial NOT NULL,
    cv_id integer NOT NULL,
    name character varying(1024) NOT NULL,
    definition text,
    dbxref_id integer NOT NULL,
    is_obsolete integer DEFAULT 0 NOT NULL,
    is_relationshiptype integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE cvterm; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE cvterm IS 'A term, class or concept within an ontology or controlled vocabulary.
  Also used for relationship types. A cvterm can also be thought of
  as a node in a graph';


--
-- Name: COLUMN cvterm.cv_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm.cv_id IS 'The cv/ontology/namespace to which this cvterm belongs';


--
-- Name: COLUMN cvterm.name; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm.name IS 'A concise human-readable name describing the meaning of the cvterm';


--
-- Name: COLUMN cvterm.definition; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm.definition IS 'A human-readable text definition';


--
-- Name: COLUMN cvterm.dbxref_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm.dbxref_id IS 'Primary dbxref - The unique global OBO identifier for this cvterm.
  Note that a cvterm may  have multiple secondary dbxrefs - see also
  table: cvterm_dbxref';


--
-- Name: COLUMN cvterm.is_obsolete; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm.is_obsolete IS 'Boolean 0=false,1=true; see GO documentation for details of obsoletion.
  note that two terms with different primary dbxrefs may exist if one
  is obsolete';


--
-- Name: COLUMN cvterm.is_relationshiptype; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm.is_relationshiptype IS 'Boolean 0=false,1=true
  Relationship types (also known as Typedefs in OBO format, or as
  properties or slots) form a cv/ontology in themselves. We use this
  flag to indicate whether this cvterm is an actual term/concept or
  a relationship type';


--
-- Name: get_it_sub_cvterm_ids(text); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION get_it_sub_cvterm_ids(text) RETURNS SETOF cvterm
    AS $_$
DECLARE
    query alias for $1;
    cterm cvterm%ROWTYPE;
    cterm2 cvterm%ROWTYPE;
BEGIN
    FOR cterm IN EXECUTE query LOOP
        RETURN NEXT cterm;
        FOR cterm2 IN SELECT subject_id as cvterm_id FROM get_all_subject_ids(cterm.cvterm_id) LOOP
            RETURN NEXT cterm2;
        END LOOP;
    END LOOP;
    RETURN;
END;   
$_$
    LANGUAGE plpgsql;


--
-- Name: gffattstring(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION gffattstring(integer) RETURNS character varying
    AS $_$DECLARE
  return_string      varchar;
  f_id               ALIAS FOR $1;
  atts_view          gffatts%ROWTYPE;
  feature_row        feature%ROWTYPE;
  name               varchar;
  uniquename         varchar;
  parent             varchar;
                                                                                
BEGIN
  --Get name from feature.name
  --Get ID from feature.uniquename
                                                                                
  SELECT INTO feature_row * FROM feature WHERE feature_id = f_id;
  name  = feature_row.name;
  return_string = 'ID=' || feature_row.uniquename;
  IF name IS NOT NULL AND name != ''
  THEN
    return_string = return_string ||';' || 'Name=' || name;
  END IF;
                                                                                
  --Get Parent from feature_relationship
  SELECT INTO feature_row * FROM feature f, feature_relationship fr
    WHERE fr.subject_id = f_id AND fr.object_id = f.feature_id;
  IF FOUND
  THEN
    return_string = return_string||';'||'Parent='||feature_row.uniquename;
  END IF;
                                                                                
  FOR atts_view IN SELECT * FROM gff3atts WHERE feature_id = f_id  LOOP
    return_string = return_string || ';'
                     || atts_view.type || '='
                     || atts_view.attribute;
  END LOOP;
                                                                                
  RETURN return_string;
END;
$_$
    LANGUAGE plpgsql;


--
-- Name: db; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE db (
    db_id serial NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255),
    urlprefix character varying(255),
    url character varying(255)
);


--
-- Name: dbxref; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE dbxref (
    dbxref_id serial NOT NULL,
    db_id integer NOT NULL,
    accession character varying(255) NOT NULL,
    version character varying(255) DEFAULT ''::character varying NOT NULL,
    description text
);


--
-- Name: feature_cvterm; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_cvterm (
    feature_cvterm_id serial NOT NULL,
    feature_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_not boolean DEFAULT false NOT NULL
);


--
-- Name: TABLE feature_cvterm; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_cvterm IS 'Associate a term from a cv with a feature, for example, GO annotation';


--
-- Name: feature_dbxref; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_dbxref (
    feature_dbxref_id serial NOT NULL,
    feature_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


--
-- Name: TABLE feature_dbxref; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_dbxref IS 'links a feature to dbxrefs. This is for secondary identifiers; primary identifiers should use feature.dbxref_id';


--
-- Name: feature_pub; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_pub (
    feature_pub_id serial NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: TABLE feature_pub; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_pub IS 'Provenance. Linking table between features and publications that mention them';


--
-- Name: feature_synonym; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_synonym (
    feature_synonym_id serial NOT NULL,
    synonym_id integer NOT NULL,
    feature_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


--
-- Name: TABLE feature_synonym; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_synonym IS 'Linking table between feature and synonym';


--
-- Name: COLUMN feature_synonym.pub_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature_synonym.pub_id IS 'the pub_id link is for relating the usage of a given synonym to the publication in which it was used';


--
-- Name: COLUMN feature_synonym.is_current; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature_synonym.is_current IS 'the is_current bit indicates whether the linked synonym is the  current -official- symbol for the linked feature';


--
-- Name: COLUMN feature_synonym.is_internal; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature_synonym.is_internal IS 'typically a synonym exists so that somebody querying the db with an obsolete name can find the object theyre looking for (under its current name.  If the synonym has been used publicly & deliberately (eg in a paper), it my also be listed in reports as a synonym.   If the synonym was not used deliberately (eg, there was a typo which went public), then the is_internal bit may be set to -true- so that it is known that the 
synonym is -internal- and should be queryable but should not be listed in reports as a valid synonym';


--
-- Name: featureprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE featureprop (
    featureprop_id serial NOT NULL,
    feature_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE featureprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE featureprop IS 'A feature can have any number of slot-value property tags attached to it. This is an alternative to hardcoding a list of columns in the relational schema, and is completely extensible';


--
-- Name: COLUMN featureprop.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureprop.type_id IS 'The name of the property/slot is a cvterm. The meaning of the property is defined in that cvterm. Certain properties will only apply to certain feature types; this will be handled by the Sequence Ontology';


--
-- Name: COLUMN featureprop.value; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation. This is less efficient than using native database types, but is easier to query.';


--
-- Name: COLUMN featureprop.rank; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN featureprop.rank IS 'Property-Value ordering. Any
feature can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used';


--
-- Name: pub; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE pub (
    pub_id serial NOT NULL,
    title text,
    volumetitle text,
    volume character varying(255),
    series_name character varying(255),
    issue character varying(255),
    pyear character varying(255),
    pages character varying(255),
    miniref character varying(255),
    uniquename text NOT NULL,
    type_id integer NOT NULL,
    is_obsolete boolean DEFAULT false,
    publisher character varying(255),
    pubplace character varying(255)
);


--
-- Name: synonym; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE synonym (
    synonym_id serial NOT NULL,
    name character varying(255) NOT NULL,
    type_id integer NOT NULL,
    synonym_sgml character varying(255) NOT NULL
);


--
-- Name: TABLE synonym; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE synonym IS 'A synonym for a feature. One feature can have multiple synonyms, and the same synonym can apply to multiple features';


--
-- Name: COLUMN synonym.name; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN synonym.name IS 'The synonym itself. Should be human-readable machine-searchable ascii text';


--
-- Name: COLUMN synonym.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN synonym.type_id IS 'types would be symbol and fullname for now';


--
-- Name: COLUMN synonym.synonym_sgml; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN synonym.synonym_sgml IS 'The fully specified synonym, with any non-ascii characters encoded in SGML';


--
-- Name: gffatts; Type: VIEW; Schema: public; Owner: nassar
--

CREATE VIEW gffatts AS
    (((SELECT fs.feature_id, 'cvterm' AS "type", s.name AS attribute FROM cvterm s, feature_cvterm fs WHERE (fs.cvterm_id = s.cvterm_id) UNION ALL SELECT fs.feature_id, 'dbxref' AS "type", (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute FROM dbxref s, feature_dbxref fs, db d WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id))) UNION ALL SELECT fs.feature_id, 'synonym' AS "type", s.name AS attribute FROM synonym s, feature_synonym fs WHERE (fs.synonym_id = s.synonym_id)) UNION ALL SELECT fp.feature_id, cv.name AS "type", fp.value AS attribute FROM featureprop fp, cvterm cv WHERE (fp.type_id = cv.cvterm_id)) UNION ALL SELECT fs.feature_id, 'pub' AS "type", (((s.series_name)::text || ':'::text) || s.title) AS attribute FROM pub s, feature_pub fs WHERE (fs.pub_id = s.pub_id);


--
-- Name: gfffeatureatts(integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION gfffeatureatts(integer) RETURNS SETOF gffatts
    AS $_$
SELECT feature_id, 'cvterm' AS type,  s.name AS attribute
FROM cvterm s, feature_cvterm fs
WHERE fs.feature_id= $1 AND fs.cvterm_id = s.cvterm_id
UNION
SELECT feature_id, 'dbxref' AS type, d.name || ':' || s.accession AS attribute
FROM dbxref s, feature_dbxref fs, db d
WHERE fs.feature_id= $1 AND fs.dbxref_id = s.dbxref_id AND s.db_id = d.db_id
--UNION
--SELECT feature_id, 'expression' AS type, s.description AS attribute
--FROM expression s, feature_expression fs
--WHERE fs.feature_id= $1 AND fs.expression_id = s.expression_id
--UNION
--SELECT fg.feature_id, 'genotype' AS type, g.uniquename||': '||g.description AS attribute
--FROM gcontext g, feature_gcontext fg
--WHERE fg.feature_id= $1 AND g.gcontext_id = fg.gcontext_id
--UNION
--SELECT feature_id, 'genotype' AS type, s.description AS attribute
--FROM genotype s, feature_genotype fs
--WHERE fs.feature_id= $1 AND fs.genotype_id = s.genotype_id
--UNION
--SELECT feature_id, 'phenotype' AS type, s.description AS attribute
--FROM phenotype s, feature_phenotype fs
--WHERE fs.feature_id= $1 AND fs.phenotype_id = s.phenotype_id
UNION
SELECT feature_id, 'synonym' AS type, s.name AS attribute
FROM synonym s, feature_synonym fs
WHERE fs.feature_id= $1 AND fs.synonym_id = s.synonym_id
UNION
SELECT fp.feature_id,cv.name,fp.value
FROM featureprop fp, cvterm cv
WHERE fp.feature_id= $1 AND fp.type_id = cv.cvterm_id 
UNION
SELECT feature_id, 'pub' AS type, s.series_name || ':' || s.title AS attribute
FROM pub s, feature_pub fs
WHERE fs.feature_id= $1 AND fs.pub_id = s.pub_id
$_$
    LANGUAGE sql;


--
-- Name: p(integer, integer); Type: FUNCTION; Schema: public; Owner: nassar
--

CREATE FUNCTION p(integer, integer) RETURNS point
    AS $_$SELECT point ($1, $2)$_$
    LANGUAGE sql;


--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '$libdir/plpgsql', 'plpgsql_call_handler'
    LANGUAGE c;


--
-- Name: plpgsql_validator(oid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION plpgsql_validator(oid) RETURNS void
    AS '$libdir/plpgsql', 'plpgsql_validator'
    LANGUAGE c;


SET search_path = godb, pg_catalog;

--
-- Name: association; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW association AS
    SELECT feature_cvterm.feature_cvterm_id AS id, feature_cvterm.cvterm_id AS term_id, feature_cvterm.feature_id AS gene_product_id, feature_cvterm.is_not, 0 AS role_group, 0 AS assocdate, 0 AS source_db_id FROM public.feature_cvterm;


SET search_path = public, pg_catalog;

--
-- Name: feature_cvtermprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_cvtermprop (
    feature_cvtermprop_id serial NOT NULL,
    feature_cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE feature_cvtermprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_cvtermprop IS 'Extensible properties for feature to cvterm associations. Examples: GO evidence codes; qualifiers; metadata such as the date on which the entry was curated and the source of the association';


SET search_path = godb, pg_catalog;

--
-- Name: association_qualifier; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW association_qualifier AS
    SELECT feature_cvtermprop.feature_cvtermprop_id AS id, feature_cvtermprop.feature_cvterm_id AS association_id, feature_cvtermprop.type_id AS term_id, feature_cvtermprop.value FROM public.feature_cvtermprop;


--
-- Name: db; Type: TABLE; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE TABLE db (
    id integer,
    name character varying(255),
    fullname character varying(255),
    datatype character varying(255),
    url_syntax character varying(255)
);


--
-- Name: dbxref; Type: TABLE; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE TABLE dbxref (
    id integer,
    xref_dbname character varying(255),
    xref_key character varying(255),
    xref_keytype character varying(255),
    xref_desc text
);


SET search_path = public, pg_catalog;

--
-- Name: feature_cvterm_dbxref; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_cvterm_dbxref (
    feature_cvterm_dbxref_id serial NOT NULL,
    feature_cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


--
-- Name: TABLE feature_cvterm_dbxref; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_cvterm_dbxref IS 'Additional dbxrefs for an association. Rows in the feature_cvterm table may be backed up by dbxrefs. For example, a feature_cvterm association that was inferred via a protein-protein interaction may be backed by by refering to the dbxref for the alternate protein. Corresponds to the WITH column in a GO gene association file (but can also be used for other analagous associations). See http://www.geneontology.org/doc/GO.annotation.shtml#file for more details';


SET search_path = godb, pg_catalog;

--
-- Name: evidence; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW evidence AS
    SELECT feature_cvtermprop.feature_cvtermprop_id AS id, feature_cvtermprop.feature_cvterm_id AS association_id, feature_cvtermprop.type_id AS term_id, feature_cvtermprop.value FROM (public.feature_cvtermprop JOIN public.feature_cvterm_dbxref USING (feature_cvterm_id));


--
-- Name: evidence_dbxref; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW evidence_dbxref AS
    SELECT feature_cvtermprop.feature_cvterm_id AS id, feature_cvtermprop.feature_cvterm_id AS association_id, feature_cvtermprop.type_id AS term_id, feature_cvtermprop.value FROM (public.feature_cvtermprop JOIN public.feature_cvterm_dbxref USING (feature_cvterm_id));


SET search_path = public, pg_catalog;

--
-- Name: feature; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature (
    feature_id serial NOT NULL,
    dbxref_id integer,
    organism_id integer NOT NULL,
    name character varying(255),
    uniquename text NOT NULL,
    residues text,
    seqlen integer,
    md5checksum character(32),
    type_id integer NOT NULL,
    is_analysis boolean DEFAULT false NOT NULL,
    is_obsolete boolean DEFAULT false NOT NULL,
    timeaccessioned timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL,
    timelastmodified timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


--
-- Name: TABLE feature; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature IS 'A feature is a biological sequence or a
section of a biological sequence, or a collection of such
sections. Examples include genes, exons, transcripts, regulatory
regions, polypeptides, protein domains, chromosome sequences, sequence
variations, cross-genome match regions such as hits and HSPs and so
on; see the Sequence Ontology for more';


--
-- Name: COLUMN feature.dbxref_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.dbxref_id IS 'An optional primary public stable
identifier for this feature. Secondary identifiers and external
dbxrefs go in table:feature_dbxref';


--
-- Name: COLUMN feature.organism_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.organism_id IS 'The organism to which this feature
belongs. This column is mandatory';


--
-- Name: COLUMN feature.name; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.name IS 'The optional human-readable common name for
a feature, for display purposes';


--
-- Name: COLUMN feature.uniquename; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.uniquename IS 'The unique name for a feature; may
not be necessarily be particularly human-readable, although this is
prefered. This name must be unique for this type of feature within
this organism';


--
-- Name: COLUMN feature.residues; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.residues IS 'A sequence of alphabetic characters
representing biological residues (nucleic acids, amino acids). This
column does not need to be manifested for all features; it is optional
for features such as exons where the residues can be derived from the
featureloc. It is recommended that the value for this column be
manifested for features which may may non-contiguous sublocations (eg
transcripts), since derivation at query time is non-trivial. For
expressed sequence, the DNA sequence should be used rather than the
RNA sequence';


--
-- Name: COLUMN feature.seqlen; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.seqlen IS 'The length of the residue feature. See
column:residues. This column is partially redundant with the residues
column, and also with featureloc. This column is required because the
location may be unknown and the residue sequence may not be
manifested, yet it may be desirable to store and query the length of
the feature. The seqlen should always be manifested where the length
of the sequence is known';


--
-- Name: COLUMN feature.md5checksum; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.md5checksum IS 'The 32-character checksum of the sequence,
calculated using the MD5 algorithm. This is practically guaranteed to
be unique for any feature. This column thus acts as a unique
identifier on the mathematical sequence';


--
-- Name: COLUMN feature.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.type_id IS 'A required reference to a table:cvterm
giving the feature type. This will typically be a Sequence Ontology
identifier. This column is thus used to subclass the feature table';


--
-- Name: COLUMN feature.is_analysis; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.is_analysis IS 'Boolean indicating whether this
feature is annotated or the result of an automated analysis. Analysis
results also use the companalysis module. Note that the dividing line
between analysis/annotation may be fuzzy, this should be determined on
a per-project basis in a consistent manner. One requirement is that
there should only be one non-analysis version of each wild-type gene
feature in a genome, whereas the same gene feature can be predicted
multiple times in different analyses';


--
-- Name: COLUMN feature.is_obsolete; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.is_obsolete IS 'Boolean indicating whether this
feature has been obsoleted. Some chado instances may choose to simply
remove the feature altogether, others may choose to keep an obsolete
row in the table';


--
-- Name: COLUMN feature.timeaccessioned; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.timeaccessioned IS 'for handling object
accession/modification timestamps (as opposed to db auditing info,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado';


--
-- Name: COLUMN feature.timelastmodified; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature.timelastmodified IS 'for handling object
accession/modification timestamps (as opposed to db auditing info,
handled elsewhere). The expectation is that these fields would be
available to software interacting with chado';


SET search_path = godb, pg_catalog;

--
-- Name: gene_product; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW gene_product AS
    SELECT feature.feature_id AS id, feature.name AS symbol, feature.dbxref_id, feature.organism_id AS species_id, NULL::integer AS secondary_species_id, feature.type_id, feature.name AS fullname FROM public.feature;


--
-- Name: gene_product_count; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW gene_product_count AS
    SELECT feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM public.feature WHERE NULL::boolean;


--
-- Name: gene_product_property; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW gene_product_property AS
    SELECT featureprop.feature_id AS gene_product_id, prop.name AS property_key, featureprop.value AS property_value FROM (public.featureprop JOIN public.cvterm prop ON ((featureprop.type_id = prop.cvterm_id)));


--
-- Name: gene_product_seq; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW gene_product_seq AS
    SELECT feature.feature_id AS gene_product_id, feature.feature_id AS seq_id FROM public.feature WHERE (feature.residues IS NOT NULL);


--
-- Name: gene_product_synonym; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW gene_product_synonym AS
    SELECT feature_synonym.feature_id AS gene_product_id, synonym.name AS product_synonym FROM (public.feature_synonym JOIN public.synonym USING (synonym_id));


--
-- Name: go_acc; Type: TABLE; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE TABLE go_acc (
    dbxref_id integer,
    acc text
);


--
-- Name: graph_path; Type: TABLE; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE TABLE graph_path (
    id integer,
    term1_id integer,
    term2_id integer,
    distance integer
);


--
-- Name: instance_data; Type: TABLE; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE TABLE instance_data (
    release_name character varying(255),
    release_type character varying(255),
    release_notes text
);


--
-- Name: seq; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW seq AS
    SELECT feature.feature_id AS id, feature.name AS display_id, feature.name AS description, feature.residues AS seq, feature.seqlen AS seq_len, feature.md5checksum, "type".name AS moltype, 0 AS "timestamp" FROM (public.feature JOIN public.cvterm "type" ON ((feature.type_id = "type".cvterm_id)));


--
-- Name: seq_dbxref; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW seq_dbxref AS
    SELECT feature_dbxref.feature_id AS seq_id, feature_dbxref.dbxref_id FROM public.feature_dbxref;


--
-- Name: seq_property; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW seq_property AS
    SELECT feature.feature_id, feature.dbxref_id, feature.organism_id, feature.name, feature.uniquename, feature.residues, feature.seqlen, feature.md5checksum, feature.type_id, feature.is_analysis, feature.is_obsolete, feature.timeaccessioned, feature.timelastmodified FROM public.feature WHERE NULL::boolean;


SET search_path = public, pg_catalog;

--
-- Name: organism; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE organism (
    organism_id serial NOT NULL,
    abbreviation character varying(255),
    genus character varying(255) NOT NULL,
    species character varying(255) NOT NULL,
    common_name character varying(255),
    "comment" text
);


--
-- Name: COLUMN organism.species; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN organism.species IS 'A type of organism is always uniquely identified by genus+species. When mapping from the NCBI taxonomy names.dmp file, the unique-name column must be used where it is present, as the name column is not always unique (eg environmental samples)';


--
-- Name: organism_dbxref; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE organism_dbxref (
    organism_dbxref_id serial NOT NULL,
    organism_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


SET search_path = godb, pg_catalog;

--
-- Name: species; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW species AS
    SELECT organism.organism_id AS id, dbxref.accession AS ncbi_taxa_id, organism.common_name, NULL::character varying AS lineage_string, organism.genus, organism.species FROM (((public.organism JOIN public.organism_dbxref USING (organism_id)) JOIN public.dbxref USING (dbxref_id)) JOIN public.db USING (db_id)) WHERE ((db.name)::text = 'NCBITaxon'::text);


--
-- Name: term; Type: TABLE; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE TABLE term (
    id integer,
    acc text,
    name character varying(1024),
    is_obsolete integer,
    is_root integer
);


--
-- Name: term2term; Type: TABLE; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE TABLE term2term (
    id integer,
    relationship_type_id integer,
    term1_id integer,
    term2_id integer
);


SET search_path = public, pg_catalog;

--
-- Name: cvterm_dbxref; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE cvterm_dbxref (
    cvterm_dbxref_id serial NOT NULL,
    cvterm_id integer NOT NULL,
    dbxref_id integer NOT NULL,
    is_for_definition integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE cvterm_dbxref; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE cvterm_dbxref IS 'In addition to the primary identifier (cvterm.dbxref_id) a cvterm can have zero or more secondary identifiers, which may be in external databases';


--
-- Name: COLUMN cvterm_dbxref.is_for_definition; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm_dbxref.is_for_definition IS 'A cvterm.definition should be supported by one or more references. If this column is true, the dbxref is not for a term in an external db - it is a dbxref for provenance information for the definition';


SET search_path = godb, pg_catalog;

--
-- Name: term_dbxref; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW term_dbxref AS
    SELECT cvterm_dbxref.cvterm_id AS term_id, cvterm_dbxref.dbxref_id, 0 AS is_for_definition FROM public.cvterm_dbxref;


--
-- Name: term_definition; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW term_definition AS
    SELECT cvterm.cvterm_id AS term_id, cvterm.definition AS term_definition FROM public.cvterm WHERE (cvterm.definition IS NOT NULL);


SET search_path = public, pg_catalog;

--
-- Name: cvtermsynonym; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE cvtermsynonym (
    cvtermsynonym_id serial NOT NULL,
    cvterm_id integer NOT NULL,
    synonym character varying(1024) NOT NULL,
    type_id integer
);


--
-- Name: TABLE cvtermsynonym; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE cvtermsynonym IS 'A cvterm actually represents a distinct class or concept. A concept can be refered to by different phrases or names. In addition to the primary name (cvterm.name) there can be a number of alternative aliases or synonyms. For example, -T cell- as a synonym for -T lymphocyte-';


--
-- Name: COLUMN cvtermsynonym.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvtermsynonym.type_id IS 'A synonym can be exact, narrow or borader than';


SET search_path = godb, pg_catalog;

--
-- Name: term_synonym; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW term_synonym AS
    SELECT cvtermsynonym.cvterm_id AS term_id, cvtermsynonym.synonym AS term_synonym, cvtermsynonym.type_id AS synonym_type_id FROM public.cvtermsynonym;


--
-- Name: v_db; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW v_db AS
    SELECT db.db_id AS id, db.name, db.name AS fullname, NULL::character varying AS datatype, NULL::character varying AS url_syntax FROM public.db;


--
-- Name: v_dbxref; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW v_dbxref AS
    SELECT dbxref.dbxref_id AS id, db.name AS xref_dbname, dbxref.accession AS xref_key, NULL::character varying AS xref_keytype, dbxref.description AS xref_desc FROM (public.dbxref JOIN public.db USING (db_id));


--
-- Name: v_go_acc; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW v_go_acc AS
    SELECT dbxref.dbxref_id, (((db.name)::text || ':'::text) || (dbxref.accession)::text) AS acc FROM (public.dbxref JOIN public.db USING (db_id));


--
-- Name: v_graph_path; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW v_graph_path AS
    SELECT cvtermpath.cvtermpath_id AS id, cvtermpath.object_id AS term1_id, cvtermpath.subject_id AS term2_id, cvtermpath.pathdistance AS distance FROM public.cvtermpath;


--
-- Name: v_term; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW v_term AS
    SELECT cvterm.cvterm_id AS id, go_acc.acc, cvterm.name, cvterm.is_obsolete, 0 AS is_root FROM (public.cvterm JOIN go_acc USING (dbxref_id));


SET search_path = public, pg_catalog;

--
-- Name: cvterm_relationship; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE cvterm_relationship (
    cvterm_relationship_id serial NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


--
-- Name: TABLE cvterm_relationship; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE cvterm_relationship IS 'A relationship linking two cvterms. A relationship can be thought of
  as an edge in a graph, or as a natural language statement about
  two cvterms. The statement is of the form SUBJECT PREDICATE OBJECT;
  for example "wing part_of body"';


--
-- Name: COLUMN cvterm_relationship.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm_relationship.type_id IS 'relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed';


--
-- Name: COLUMN cvterm_relationship.subject_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm_relationship.subject_id IS 'the subject of the subj-predicate-obj sentence. In a DAG, this corresponds to the child node';


--
-- Name: COLUMN cvterm_relationship.object_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvterm_relationship.object_id IS 'the object of the subj-predicate-obj sentence. In a DAG, this corresponds to the parent node';


SET search_path = godb, pg_catalog;

--
-- Name: v_term2term; Type: VIEW; Schema: godb; Owner: nassar
--

CREATE VIEW v_term2term AS
    SELECT cvterm_relationship.cvterm_relationship_id AS id, cvterm_relationship.type_id AS relationship_type_id, cvterm_relationship.object_id AS term1_id, cvterm_relationship.subject_id AS term2_id FROM public.cvterm_relationship;


SET search_path = public, pg_catalog;

--
-- Name: acquisition; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE acquisition (
    acquisition_id serial NOT NULL,
    assay_id integer NOT NULL,
    protocol_id integer,
    channel_id integer,
    acquisitiondate timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    name text,
    uri text
);


--
-- Name: TABLE acquisition; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE acquisition IS 'this represents the scanning of hybridized material.  the output of this process is typically a digital image of an array';


--
-- Name: acquisition_acquisition_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('acquisition', 'acquisition_id'), 1, false);


--
-- Name: acquisition_relationship; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE acquisition_relationship (
    acquisition_relationship_id serial NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE acquisition_relationship; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE acquisition_relationship IS 'multiple monochrome images may be merged to form a multi-color image.  red-green images of 2-channel hybridizations are an example of this';


--
-- Name: acquisition_relationship_acquisition_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('acquisition_relationship', 'acquisition_relationship_id'), 1, false);


--
-- Name: acquisitionprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE acquisitionprop (
    acquisitionprop_id serial NOT NULL,
    acquisition_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE acquisitionprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE acquisitionprop IS 'parameters associated with image acquisition';


--
-- Name: acquisitionprop_acquisitionprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('acquisitionprop', 'acquisitionprop_id'), 1, false);


--
-- Name: elementresult; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE elementresult (
    elementresult_id serial NOT NULL,
    element_id integer NOT NULL,
    quantification_id integer NOT NULL,
    signal double precision NOT NULL
);


--
-- Name: TABLE elementresult; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE elementresult IS 'an element on an array produces a measurement when hybridized to a biomaterial (traceable through quantification_id).  this is the base data from which tables that actually contain data inherit';


--
-- Name: elementresult_elementresult_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('elementresult', 'elementresult_id'), 1, false);


--
-- Name: affymetrixcel; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixcel (
    mean double precision NOT NULL,
    sd double precision NOT NULL,
    pixels integer NOT NULL
)
INHERITS (elementresult);


--
-- Name: affymetrixdabg; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixdabg (
    call_p double precision NOT NULL
)
INHERITS (elementresult);


--
-- Name: affymetrixdchip; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixdchip (
    z double precision
)
INHERITS (elementresult);


--
-- Name: affymetrixgcrma; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixgcrma (
    z double precision
)
INHERITS (elementresult);


--
-- Name: affymetrixmas5; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixmas5 (
    call character(1) NOT NULL,
    call_p double precision NOT NULL,
    statpairs integer NOT NULL,
    statpairsused integer NOT NULL,
    z double precision
)
INHERITS (elementresult);


--
-- Name: affymetrixplier; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixplier (
)
INHERITS (elementresult);


--
-- Name: affymetrixprobe; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixprobe (
    element_id serial NOT NULL,
    feature_id integer,
    arraydesign_id integer NOT NULL,
    type_id integer,
    dbxref_id integer,
    name character varying(255),
    affymetrixprobeset_id integer,
    "row" integer NOT NULL,
    col integer NOT NULL
);


--
-- Name: affymetrixprobe_element_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('affymetrixprobe', 'element_id'), 1, false);


--
-- Name: affymetrixprobeset; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixprobeset (
    element_id serial NOT NULL,
    feature_id integer,
    arraydesign_id integer NOT NULL,
    type_id integer,
    dbxref_id integer,
    name character varying(255)
);


--
-- Name: affymetrixprobeset_element_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('affymetrixprobeset', 'element_id'), 1, false);


--
-- Name: affymetrixprobesetstat; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixprobesetstat (
    mean double precision NOT NULL,
    median double precision NOT NULL,
    quartile1 double precision NOT NULL,
    quartile3 double precision NOT NULL,
    sd double precision NOT NULL,
    n integer NOT NULL
)
INHERITS (elementresult);


--
-- Name: affymetrixrma; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixrma (
    z double precision
)
INHERITS (elementresult);


--
-- Name: affymetrixsea; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixsea (
)
INHERITS (elementresult);


--
-- Name: affymetrixsnp; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixsnp (
    call smallint
)
INHERITS (elementresult);


--
-- Name: affymetrixvsn; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE affymetrixvsn (
    z double precision
)
INHERITS (elementresult);


--
-- Name: analysis; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE analysis (
    analysis_id serial NOT NULL,
    name character varying(255),
    description text,
    program character varying(255) NOT NULL,
    programversion character varying(255) NOT NULL,
    algorithm character varying(255),
    sourcename character varying(255),
    sourceversion character varying(255),
    sourceuri text,
    timeexecuted timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone NOT NULL
);


--
-- Name: analysis_analysis_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('analysis', 'analysis_id'), 9, true);


--
-- Name: analysisfeature; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE analysisfeature (
    analysisfeature_id serial NOT NULL,
    feature_id integer NOT NULL,
    analysis_id integer NOT NULL,
    rawscore double precision,
    normscore double precision,
    significance double precision,
    identity double precision
);


--
-- Name: analysisfeature_analysisfeature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('analysisfeature', 'analysisfeature_id'), 1, false);


--
-- Name: analysisprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE analysisprop (
    analysisprop_id serial NOT NULL,
    analysis_id integer NOT NULL,
    type_id integer NOT NULL,
    value text
);


--
-- Name: analysisprop_analysisprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('analysisprop', 'analysisprop_id'), 1, false);


--
-- Name: arraydesign; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE arraydesign (
    arraydesign_id serial NOT NULL,
    manufacturer_id integer NOT NULL,
    platformtype_id integer NOT NULL,
    substratetype_id integer,
    protocol_id integer,
    dbxref_id integer,
    name text NOT NULL,
    version text,
    description text,
    array_dimensions text,
    element_dimensions text,
    num_of_elements integer,
    num_array_columns integer,
    num_array_rows integer,
    num_grid_columns integer,
    num_grid_rows integer,
    num_sub_columns integer,
    num_sub_rows integer
);


--
-- Name: TABLE arraydesign; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE arraydesign IS 'general properties about an array.  and array is a template used to generate physical slides, etc.  it contains layout information, as well as global array properties, such as material (glass, nylon) and spot dimensions(in rows/columns).';


--
-- Name: arraydesign_arraydesign_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('arraydesign', 'arraydesign_id'), 38, true);


--
-- Name: arraydesignprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE arraydesignprop (
    arraydesignprop_id serial NOT NULL,
    arraydesign_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE arraydesignprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE arraydesignprop IS 'extra arraydesign properties that are not accounted for in arraydesign';


--
-- Name: arraydesignprop_arraydesignprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('arraydesignprop', 'arraydesignprop_id'), 1, false);


--
-- Name: assay; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE assay (
    assay_id serial NOT NULL,
    arraydesign_id integer NOT NULL,
    protocol_id integer,
    assaydate timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    arrayidentifier text,
    arraybatchidentifier text,
    operator_id integer NOT NULL,
    dbxref_id integer,
    name text,
    description text
);


--
-- Name: TABLE assay; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE assay IS 'an assay consists of a physical instance of an array, combined with the conditions used to create the array (protocols, technician info).  the assay can be thought of as a hybridization';


--
-- Name: assay_assay_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('assay', 'assay_id'), 1, false);


--
-- Name: assay_biomaterial; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE assay_biomaterial (
    assay_biomaterial_id serial NOT NULL,
    assay_id integer NOT NULL,
    biomaterial_id integer NOT NULL,
    channel_id integer,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE assay_biomaterial; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE assay_biomaterial IS 'a biomaterial can be hybridized many times (technical replicates), or combined with other biomaterials in a single hybridization (for two-channel arrays)';


--
-- Name: assay_biomaterial_assay_biomaterial_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('assay_biomaterial', 'assay_biomaterial_id'), 1, false);


--
-- Name: assay_project; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE assay_project (
    assay_project_id serial NOT NULL,
    assay_id integer NOT NULL,
    project_id integer NOT NULL
);


--
-- Name: TABLE assay_project; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE assay_project IS 'link assays to projects';


--
-- Name: assay_project_assay_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('assay_project', 'assay_project_id'), 1, false);


--
-- Name: assayprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE assayprop (
    assayprop_id serial NOT NULL,
    assay_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE assayprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE assayprop IS 'extra assay properties that are not accounted for in assay';


--
-- Name: assayprop_assayprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('assayprop', 'assayprop_id'), 1, false);


--
-- Name: biomaterial; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE biomaterial (
    biomaterial_id serial NOT NULL,
    taxon_id integer,
    biosourceprovider_id integer,
    dbxref_id integer,
    name text,
    description text
);


--
-- Name: TABLE biomaterial; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE biomaterial IS 'a biomaterial represents the MAGE concept of BioSource, BioSample, and LabeledExtract.  it is essentially some biological material (tissue, cells, serum) that may have been processed.  processed biomaterials should be traceable back to raw biomaterials via the biomaterialrelationship table.';


--
-- Name: biomaterial_biomaterial_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('biomaterial', 'biomaterial_id'), 1, false);


--
-- Name: biomaterial_dbxref; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE biomaterial_dbxref (
    biomaterial_dbxref_id serial NOT NULL,
    biomaterial_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


--
-- Name: biomaterial_dbxref_biomaterial_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('biomaterial_dbxref', 'biomaterial_dbxref_id'), 1, false);


--
-- Name: biomaterial_relationship; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE biomaterial_relationship (
    biomaterial_relationship_id serial NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL
);


--
-- Name: TABLE biomaterial_relationship; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE biomaterial_relationship IS 'relate biomaterials to one another.  this is a way to track a series of treatments or material splits/merges, for instance';


--
-- Name: biomaterial_relationship_biomaterial_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('biomaterial_relationship', 'biomaterial_relationship_id'), 1, false);


--
-- Name: biomaterial_treatment; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE biomaterial_treatment (
    biomaterial_treatment_id serial NOT NULL,
    biomaterial_id integer NOT NULL,
    treatment_id integer NOT NULL,
    unittype_id integer,
    value real,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE biomaterial_treatment; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE biomaterial_treatment IS 'link biomaterials to treatments.  treatments have an order of operations (rank), and associated measurements (unittype_id, value)';


--
-- Name: biomaterial_treatment_biomaterial_treatment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('biomaterial_treatment', 'biomaterial_treatment_id'), 1, false);


--
-- Name: biomaterialprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE biomaterialprop (
    biomaterialprop_id serial NOT NULL,
    biomaterial_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE biomaterialprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE biomaterialprop IS 'extra biomaterial properties that are not accounted for in biomaterial';


--
-- Name: biomaterialprop_biomaterialprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('biomaterialprop', 'biomaterialprop_id'), 1, false);


--
-- Name: channel; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE channel (
    channel_id serial NOT NULL,
    name text NOT NULL,
    definition text NOT NULL
);


--
-- Name: TABLE channel; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE channel IS 'different array platforms can record signals from one or more channels (cDNA arrays typically use two CCD, but affy uses only one)';


--
-- Name: channel_channel_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('channel', 'channel_id'), 1, false);


--
-- Name: contact; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE contact (
    contact_id serial NOT NULL,
    type_id integer,
    name character varying(255) NOT NULL,
    description character varying(255)
);


--
-- Name: TABLE contact; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE contact IS 'model persons, institutes, groups, organizations, etc';


--
-- Name: COLUMN contact.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN contact.type_id IS 'what type of contact is this?  e.g. "person", "lab", etc.';


--
-- Name: contact_contact_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('contact', 'contact_id'), 2, true);


--
-- Name: contact_relationship; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE contact_relationship (
    contact_relationship_id serial NOT NULL,
    type_id integer NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL
);


--
-- Name: TABLE contact_relationship; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE contact_relationship IS 'model relationships between contacts';


--
-- Name: COLUMN contact_relationship.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN contact_relationship.type_id IS 'relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed';


--
-- Name: COLUMN contact_relationship.subject_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN contact_relationship.subject_id IS 'the subject of the subj-predicate-obj sentence. In a DAG, this corresponds to the child node';


--
-- Name: COLUMN contact_relationship.object_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN contact_relationship.object_id IS 'the object of the subj-predicate-obj sentence. In a DAG, this corresponds to the parent node';


--
-- Name: contact_relationship_contact_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('contact_relationship', 'contact_relationship_id'), 1, false);


--
-- Name: control; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE control (
    control_id serial NOT NULL,
    type_id integer NOT NULL,
    assay_id integer NOT NULL,
    tableinfo_id integer NOT NULL,
    row_id integer NOT NULL,
    name text,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: control_control_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('control', 'control_id'), 1, false);


--
-- Name: cv; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE cv (
    cv_id serial NOT NULL,
    name character varying(255) NOT NULL,
    definition text
);


--
-- Name: TABLE cv; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE cv IS 'A controlled vocabulary or ontology. A cv is composed of cvterms (aka terms, classes, concepts, frames) and the relationships between them';


--
-- Name: COLUMN cv.name; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cv.name IS 'The name of the ontology. This corresponds to the obo-format -namespace-. cv names are unique';


--
-- Name: COLUMN cv.definition; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cv.definition IS 'A description of the criteria for membership of this ontology';


--
-- Name: cv_cv_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('cv', 'cv_id'), 7, true);


--
-- Name: cvterm_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('cvterm', 'cvterm_id'), 220, true);


--
-- Name: cvterm_dbxref_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('cvterm_dbxref', 'cvterm_dbxref_id'), 1, false);


--
-- Name: cvterm_relationship_cvterm_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('cvterm_relationship', 'cvterm_relationship_id'), 1, false);


--
-- Name: cvtermpath_cvtermpath_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('cvtermpath', 'cvtermpath_id'), 1, false);


--
-- Name: cvtermprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE cvtermprop (
    cvtermprop_id serial NOT NULL,
    cvterm_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE cvtermprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE cvtermprop IS 'Additional extensible properties can be attached to a cvterm using this table. Corresponds to -AnnotationProperty- in W3C OWL format';


--
-- Name: COLUMN cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvtermprop.type_id IS 'The name of the property/slot is a cvterm. The meaning of the property is defined in that cvterm';


--
-- Name: COLUMN cvtermprop.value; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvtermprop.value IS 'The value of the property, represented as text. Numeric values are converted to their text representation';


--
-- Name: COLUMN cvtermprop.rank; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN cvtermprop.rank IS 'Property-Value ordering. Any
cvterm can have multiple values for any particular property type -
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used';


--
-- Name: cvtermprop_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('cvtermprop', 'cvtermprop_id'), 1, false);


--
-- Name: cvtermsynonym_cvtermsynonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('cvtermsynonym', 'cvtermsynonym_id'), 52, true);


--
-- Name: db_db_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('db', 'db_id'), 41, true);


--
-- Name: dbxref_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('dbxref', 'dbxref_id'), 220, true);


--
-- Name: dbxrefprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE dbxrefprop (
    dbxrefprop_id serial NOT NULL,
    dbxref_id integer NOT NULL,
    type_id integer NOT NULL,
    value text DEFAULT ''::text NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE dbxrefprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE dbxrefprop IS 'Metadata about a dbxref. Note that this is not defined in the dbxref module, as it depends on the cvterm table. This table has a structure analagous to cvtermprop';


--
-- Name: dbxrefprop_dbxrefprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('dbxrefprop', 'dbxrefprop_id'), 1, false);


--
-- Name: eimage; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE eimage (
    eimage_id serial NOT NULL,
    eimage_data text,
    eimage_type character varying(255) NOT NULL,
    image_uri character varying(255)
);


--
-- Name: eimage_eimage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('eimage', 'eimage_id'), 1, false);


--
-- Name: element; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE element (
    element_id serial NOT NULL,
    feature_id integer,
    arraydesign_id integer NOT NULL,
    type_id integer,
    dbxref_id integer
);


--
-- Name: TABLE element; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE element IS 'represents a feature of the array.  this is typically a region of the array coated or bound to DNA';


--
-- Name: element_element_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('element', 'element_id'), 1, false);


--
-- Name: element_relationship; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE element_relationship (
    element_relationship_id serial NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE element_relationship; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE element_relationship IS 'sometimes we want to combine measurements from multiple elements to get a composite value.  affy combines many probes to form a probeset measurement, for instance';


--
-- Name: element_relationship_element_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('element_relationship', 'element_relationship_id'), 1, false);


--
-- Name: elementresult_relationship; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE elementresult_relationship (
    elementresult_relationship_id serial NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE elementresult_relationship; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE elementresult_relationship IS 'sometimes we want to combine measurements from multiple elements to get a composite value.  affy combines many probes to form a probeset measurement, for instance';


--
-- Name: elementresult_relationship_elementresult_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('elementresult_relationship', 'elementresult_relationship_id'), 1, false);


--
-- Name: environment; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE environment (
    environment_id serial NOT NULL,
    uniquename text NOT NULL,
    description text
);


--
-- Name: environment_cvterm; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE environment_cvterm (
    environment_cvterm_id serial NOT NULL,
    environment_id integer NOT NULL,
    cvterm_id integer NOT NULL
);


--
-- Name: environment_cvterm_environment_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('environment_cvterm', 'environment_cvterm_id'), 1, false);


--
-- Name: environment_environment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('environment', 'environment_id'), 1, false);


--
-- Name: expression; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE expression (
    expression_id serial NOT NULL,
    description text
);


--
-- Name: expression_cvterm; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE expression_cvterm (
    expression_cvterm_id serial NOT NULL,
    expression_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    rank integer NOT NULL,
    cvterm_type character varying(255)
);


--
-- Name: expression_cvterm_expression_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('expression_cvterm', 'expression_cvterm_id'), 1, false);


--
-- Name: expression_expression_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('expression', 'expression_id'), 1, false);


--
-- Name: expression_image; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE expression_image (
    expression_image_id serial NOT NULL,
    expression_id integer NOT NULL,
    eimage_id integer NOT NULL
);


--
-- Name: expression_image_expression_image_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('expression_image', 'expression_image_id'), 1, false);


--
-- Name: expression_pub; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE expression_pub (
    expression_pub_id serial NOT NULL,
    expression_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: expression_pub_expression_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('expression_pub', 'expression_pub_id'), 1, false);


--
-- Name: feature_cvterm_dbxref_feature_cvterm_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_cvterm_dbxref', 'feature_cvterm_dbxref_id'), 1, false);


--
-- Name: feature_cvterm_feature_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_cvterm', 'feature_cvterm_id'), 1, false);


--
-- Name: feature_cvterm_pub; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_cvterm_pub (
    feature_cvterm_pub_id serial NOT NULL,
    feature_cvterm_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: TABLE feature_cvterm_pub; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_cvterm_pub IS 'Secondary pubs for an
association. Each feature_cvterm association is supported by a single
primary publication. Additional secondary pubs can be added using this
linking table (in a GO gene association file, these corresponding to
any IDs after the pipe symbol in the publications column';


--
-- Name: feature_cvterm_pub_feature_cvterm_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_cvterm_pub', 'feature_cvterm_pub_id'), 1, false);


--
-- Name: feature_cvtermprop_feature_cvtermprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_cvtermprop', 'feature_cvtermprop_id'), 1, false);


--
-- Name: feature_dbxref_feature_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_dbxref', 'feature_dbxref_id'), 1, false);


--
-- Name: feature_expression; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_expression (
    feature_expression_id serial NOT NULL,
    expression_id integer NOT NULL,
    feature_id integer NOT NULL
);


--
-- Name: feature_expression_feature_expression_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_expression', 'feature_expression_id'), 1, false);


--
-- Name: feature_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature', 'feature_id'), 1, false);


--
-- Name: feature_genotype; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_genotype (
    feature_genotype_id serial NOT NULL,
    feature_id integer NOT NULL,
    genotype_id integer NOT NULL,
    chromosome_id integer,
    rank integer NOT NULL,
    cgroup integer NOT NULL,
    cvterm_id integer NOT NULL
);


--
-- Name: feature_genotype_feature_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_genotype', 'feature_genotype_id'), 1, false);


--
-- Name: feature_phenotype; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_phenotype (
    feature_phenotype_id serial NOT NULL,
    feature_id integer NOT NULL,
    phenotype_id integer NOT NULL
);


--
-- Name: feature_phenotype_feature_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_phenotype', 'feature_phenotype_id'), 1, false);


--
-- Name: feature_pub_feature_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_pub', 'feature_pub_id'), 1, false);


--
-- Name: feature_relationship; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_relationship (
    feature_relationship_id serial NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE feature_relationship; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_relationship IS 'features can be arranged in
graphs, eg exon part_of transcript part_of gene; translation madeby
transcript if type is thought of as a verb, each arc makes a statement
[SUBJECT VERB OBJECT] object can also be thought of as parent
(containing feature), and subject as child (contained feature or
subfeature) -- we include the relationship rank/order, because even
though most of the time we can order things implicitly by sequence
coordinates, we cant always do this - eg transpliced genes.  its also
useful for quickly getting implicit introns';


--
-- Name: COLUMN feature_relationship.subject_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature_relationship.subject_id IS 'the subject of the subj-predicate-obj sentence. This is typically the subfeature';


--
-- Name: COLUMN feature_relationship.object_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature_relationship.object_id IS 'the object of the subj-predicate-obj sentence. This is typically the container feature';


--
-- Name: COLUMN feature_relationship.type_id; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature_relationship.type_id IS 'relationship type between subject and object. This is a cvterm, typically from the OBO relationship ontology, although other relationship types are allowed. The most common relationship type is OBO_REL:part_of. Valid relationship types are constrained by the Sequence Ontology';


--
-- Name: COLUMN feature_relationship.value; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature_relationship.value IS 'Additional notes/comments';


--
-- Name: COLUMN feature_relationship.rank; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON COLUMN feature_relationship.rank IS 'The ordering of subject features with respect to the object feature may be important (for example, exon ordering on a transcript - not always derivable if you take trans spliced genes into consideration). rank is used to order these; starts from zero';


--
-- Name: feature_relationship_feature_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_relationship', 'feature_relationship_id'), 1, false);


--
-- Name: feature_relationship_pub; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_relationship_pub (
    feature_relationship_pub_id serial NOT NULL,
    feature_relationship_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: TABLE feature_relationship_pub; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_relationship_pub IS 'Provenance. Attach optional evidence to a feature_relationship in the form of a publication';


--
-- Name: feature_relationship_pub_feature_relationship_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_relationship_pub', 'feature_relationship_pub_id'), 1, false);


--
-- Name: feature_relationshipprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_relationshipprop (
    feature_relationshipprop_id serial NOT NULL,
    feature_relationship_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE feature_relationshipprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_relationshipprop IS 'Extensible properties for feature_relationships. Analagous structure to featureprop';


--
-- Name: feature_relationshipprop_feature_relationshipprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_relationshipprop', 'feature_relationshipprop_id'), 1, false);


--
-- Name: feature_relationshipprop_pub; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE feature_relationshipprop_pub (
    feature_relationshipprop_pub_id serial NOT NULL,
    feature_relationshipprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: TABLE feature_relationshipprop_pub; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE feature_relationshipprop_pub IS 'Provenance for feature_relationshipprop';


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_pub_i_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_relationshipprop_pub', 'feature_relationshipprop_pub_id'), 1, false);


--
-- Name: feature_synonym_feature_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('feature_synonym', 'feature_synonym_id'), 1, false);


--
-- Name: feature_uniquename_seq; Type: SEQUENCE; Schema: public; Owner: nassar
--

CREATE SEQUENCE feature_uniquename_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


--
-- Name: feature_uniquename_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval('feature_uniquename_seq', 1, false);


--
-- Name: featureloc_featureloc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('featureloc', 'featureloc_id'), 1, false);


--
-- Name: featuremap; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE featuremap (
    featuremap_id serial NOT NULL,
    name character varying(255),
    description text,
    unittype_id integer
);


--
-- Name: featuremap_featuremap_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('featuremap', 'featuremap_id'), 1, false);


--
-- Name: featuremap_pub; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE featuremap_pub (
    featuremap_pub_id serial NOT NULL,
    featuremap_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: featuremap_pub_featuremap_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('featuremap_pub', 'featuremap_pub_id'), 1, false);


--
-- Name: featurepos; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE featurepos (
    featurepos_id serial NOT NULL,
    featuremap_id serial NOT NULL,
    feature_id integer NOT NULL,
    map_feature_id integer NOT NULL,
    mappos double precision NOT NULL
);


--
-- Name: featurepos_featuremap_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('featurepos', 'featuremap_id'), 1, false);


--
-- Name: featurepos_featurepos_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('featurepos', 'featurepos_id'), 1, false);


--
-- Name: featureprop_featureprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('featureprop', 'featureprop_id'), 1, false);


--
-- Name: featureprop_pub; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE featureprop_pub (
    featureprop_pub_id serial NOT NULL,
    featureprop_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: TABLE featureprop_pub; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE featureprop_pub IS 'Provenance. Any featureprop assignment can optionally be supported by a publication';


--
-- Name: featureprop_pub_featureprop_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('featureprop_pub', 'featureprop_pub_id'), 1, false);


--
-- Name: featurerange; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE featurerange (
    featurerange_id serial NOT NULL,
    featuremap_id integer NOT NULL,
    feature_id integer NOT NULL,
    leftstartf_id integer NOT NULL,
    leftendf_id integer,
    rightstartf_id integer,
    rightendf_id integer NOT NULL,
    rangestr character varying(255)
);


--
-- Name: featurerange_featurerange_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('featurerange', 'featurerange_id'), 1, false);


--
-- Name: genotype; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE genotype (
    genotype_id serial NOT NULL,
    uniquename text NOT NULL,
    description character varying(255)
);


--
-- Name: genotype_genotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('genotype', 'genotype_id'), 1, false);


--
-- Name: gff3atts; Type: VIEW; Schema: public; Owner: nassar
--

CREATE VIEW gff3atts AS
    (((SELECT fs.feature_id, 'Ontology_term' AS "type", dbx.accession AS attribute FROM cvterm s, dbxref dbx, feature_cvterm fs WHERE ((fs.cvterm_id = s.cvterm_id) AND (s.dbxref_id = dbx.dbxref_id)) UNION ALL SELECT fs.feature_id, 'Dbxref' AS "type", (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute FROM dbxref s, feature_dbxref fs, db d WHERE (((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id)) AND ((d.name)::text <> 'GFF_source'::text))) UNION ALL SELECT f.feature_id, 'Alias' AS "type", s.name AS attribute FROM synonym s, feature_synonym fs, feature f WHERE (((fs.synonym_id = s.synonym_id) AND (f.feature_id = fs.feature_id)) AND ((f.name)::text <> (s.name)::text))) UNION ALL SELECT fp.feature_id, cv.name AS "type", fp.value AS attribute FROM featureprop fp, cvterm cv WHERE (fp.type_id = cv.cvterm_id)) UNION ALL SELECT fs.feature_id, 'pub' AS "type", (((s.series_name)::text || ':'::text) || s.title) AS attribute FROM pub s, feature_pub fs WHERE (fs.pub_id = s.pub_id);


--
-- Name: gff3view; Type: VIEW; Schema: public; Owner: nassar
--

CREATE VIEW gff3view AS
    SELECT f.feature_id, sf.name AS ref, dbx.accession AS source, cv.name AS "type", (fl.fmin + 1) AS fstart, fl.fmax AS fend, af.significance AS score, fl.strand, fl.phase, gffattstring(f.feature_id) AS attributes, f.seqlen, f.name, f.organism_id FROM ((((((feature f LEFT JOIN featureloc fl ON ((f.feature_id = fl.feature_id))) LEFT JOIN feature sf ON ((fl.srcfeature_id = sf.feature_id))) LEFT JOIN feature_dbxref fd ON ((f.feature_id = fd.feature_id))) LEFT JOIN dbxref dbx ON ((dbx.dbxref_id = fd.dbxref_id))) LEFT JOIN cvterm cv ON ((f.type_id = cv.cvterm_id))) LEFT JOIN analysisfeature af ON ((f.feature_id = af.feature_id))) WHERE (dbx.db_id IN (SELECT db.db_id FROM db WHERE ((db.name)::text = 'GFF_source'::text)));


--
-- Name: library; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE library (
    library_id serial NOT NULL,
    organism_id integer NOT NULL,
    name character varying(255),
    uniquename text NOT NULL,
    type_id integer NOT NULL
);


--
-- Name: library_cvterm; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE library_cvterm (
    library_cvterm_id serial NOT NULL,
    library_id integer NOT NULL,
    cvterm_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: library_cvterm_library_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('library_cvterm', 'library_cvterm_id'), 1, false);


--
-- Name: library_feature; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE library_feature (
    library_feature_id serial NOT NULL,
    library_id integer NOT NULL,
    feature_id integer NOT NULL
);


--
-- Name: library_feature_library_feature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('library_feature', 'library_feature_id'), 1, false);


--
-- Name: library_library_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('library', 'library_id'), 1, false);


--
-- Name: library_pub; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE library_pub (
    library_pub_id serial NOT NULL,
    library_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: library_pub_library_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('library_pub', 'library_pub_id'), 1, false);


--
-- Name: library_synonym; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE library_synonym (
    library_synonym_id serial NOT NULL,
    synonym_id integer NOT NULL,
    library_id integer NOT NULL,
    pub_id integer NOT NULL,
    is_current boolean DEFAULT true NOT NULL,
    is_internal boolean DEFAULT false NOT NULL
);


--
-- Name: library_synonym_library_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('library_synonym', 'library_synonym_id'), 1, false);


--
-- Name: libraryprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE libraryprop (
    libraryprop_id serial NOT NULL,
    library_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: libraryprop_libraryprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('libraryprop', 'libraryprop_id'), 1, false);


--
-- Name: magedocumentation; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE magedocumentation (
    magedocumentation_id serial NOT NULL,
    mageml_id integer NOT NULL,
    tableinfo_id integer NOT NULL,
    row_id integer NOT NULL,
    mageidentifier text NOT NULL
);


--
-- Name: magedocumentation_magedocumentation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('magedocumentation', 'magedocumentation_id'), 1, false);


--
-- Name: mageml; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE mageml (
    mageml_id serial NOT NULL,
    mage_package text NOT NULL,
    mage_ml text NOT NULL
);


--
-- Name: TABLE mageml; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE mageml IS 'this table is for storing extra bits of mageml in a denormalized form.  more normalization would require many more tables';


--
-- Name: mageml_mageml_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('mageml', 'mageml_id'), 1, false);


--
-- Name: organism_dbxref_organism_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('organism_dbxref', 'organism_dbxref_id'), 1, false);


--
-- Name: organism_organism_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('organism', 'organism_id'), 10, true);


--
-- Name: organismprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE organismprop (
    organismprop_id serial NOT NULL,
    organism_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: organismprop_organismprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('organismprop', 'organismprop_id'), 1, false);


--
-- Name: phendesc; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE phendesc (
    phendesc_id serial NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    description text NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: phendesc_phendesc_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('phendesc', 'phendesc_id'), 1, false);


--
-- Name: phenotype; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE phenotype (
    phenotype_id serial NOT NULL,
    uniquename text NOT NULL,
    observable_id integer,
    attr_id integer,
    value text,
    cvalue_id integer,
    assay_id integer
);


--
-- Name: phenotype_comparison; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE phenotype_comparison (
    phenotype_comparison_id serial NOT NULL,
    genotype1_id integer NOT NULL,
    environment1_id integer NOT NULL,
    genotype2_id integer NOT NULL,
    environment2_id integer NOT NULL,
    phenotype1_id integer NOT NULL,
    phenotype2_id integer,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: phenotype_comparison_phenotype_comparison_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('phenotype_comparison', 'phenotype_comparison_id'), 1, false);


--
-- Name: phenotype_cvterm; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE phenotype_cvterm (
    phenotype_cvterm_id serial NOT NULL,
    phenotype_id integer NOT NULL,
    cvterm_id integer NOT NULL
);


--
-- Name: phenotype_cvterm_phenotype_cvterm_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('phenotype_cvterm', 'phenotype_cvterm_id'), 1, false);


--
-- Name: phenotype_phenotype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('phenotype', 'phenotype_id'), 1, false);


--
-- Name: phenstatement; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE phenstatement (
    phenstatement_id serial NOT NULL,
    genotype_id integer NOT NULL,
    environment_id integer NOT NULL,
    phenotype_id integer NOT NULL,
    type_id integer NOT NULL,
    pub_id integer NOT NULL
);


--
-- Name: phenstatement_phenstatement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('phenstatement', 'phenstatement_id'), 1, false);


--
-- Name: project; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE project (
    project_id serial NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255) NOT NULL
);


--
-- Name: project_project_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('project', 'project_id'), 1, false);


--
-- Name: protocol; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE protocol (
    protocol_id serial NOT NULL,
    type_id integer NOT NULL,
    pub_id integer,
    dbxref_id integer,
    name text NOT NULL,
    uri text,
    protocoldescription text,
    hardwaredescription text,
    softwaredescription text
);


--
-- Name: TABLE protocol; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE protocol IS 'procedural notes on how data was prepared and processed';


--
-- Name: protocol_protocol_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('protocol', 'protocol_id'), 1, false);


--
-- Name: protocolparam; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE protocolparam (
    protocolparam_id serial NOT NULL,
    protocol_id integer NOT NULL,
    name text NOT NULL,
    datatype_id integer,
    unittype_id integer,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE protocolparam; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE protocolparam IS 'parameters related to a protocol.  if the protocol is a soak, this might include attributes of bath temperature and duration';


--
-- Name: protocolparam_protocolparam_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('protocolparam', 'protocolparam_id'), 1, false);


--
-- Name: pub_dbxref; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE pub_dbxref (
    pub_dbxref_id serial NOT NULL,
    pub_id integer NOT NULL,
    dbxref_id integer NOT NULL
);


--
-- Name: pub_dbxref_pub_dbxref_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('pub_dbxref', 'pub_dbxref_id'), 1, false);


--
-- Name: pub_pub_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('pub', 'pub_id'), 1, true);


--
-- Name: pub_relationship; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE pub_relationship (
    pub_relationship_id serial NOT NULL,
    subject_id integer NOT NULL,
    object_id integer NOT NULL,
    type_id integer NOT NULL
);


--
-- Name: pub_relationship_pub_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('pub_relationship', 'pub_relationship_id'), 1, false);


--
-- Name: pubauthor; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE pubauthor (
    pubauthor_id serial NOT NULL,
    pub_id integer NOT NULL,
    rank integer NOT NULL,
    editor boolean DEFAULT false,
    surname character varying(100) NOT NULL,
    givennames character varying(100),
    suffix character varying(100)
);


--
-- Name: pubauthor_pubauthor_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('pubauthor', 'pubauthor_id'), 1, false);


--
-- Name: pubprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE pubprop (
    pubprop_id serial NOT NULL,
    pub_id integer NOT NULL,
    type_id integer NOT NULL,
    value text NOT NULL,
    rank integer
);


--
-- Name: pubprop_pubprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('pubprop', 'pubprop_id'), 1, false);


--
-- Name: quantification; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE quantification (
    quantification_id serial NOT NULL,
    acquisition_id integer NOT NULL,
    operator_id integer,
    protocol_id integer,
    analysis_id integer NOT NULL,
    quantificationdate timestamp without time zone DEFAULT ('now'::text)::timestamp(6) with time zone,
    name text,
    uri text
);


--
-- Name: TABLE quantification; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE quantification IS 'quantification is the transformation of an image acquisition to numeric data.  this typically involves statistical procedures.';


--
-- Name: quantification_quantification_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('quantification', 'quantification_id'), 1, false);


--
-- Name: quantification_relationship; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE quantification_relationship (
    quantification_relationship_id serial NOT NULL,
    subject_id integer NOT NULL,
    type_id integer NOT NULL,
    object_id integer NOT NULL
);


--
-- Name: TABLE quantification_relationship; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE quantification_relationship IS 'there may be multiple rounds of quantification, this allows us to keep an audit trail of what values went where';


--
-- Name: quantification_relationship_quantification_relationship_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('quantification_relationship', 'quantification_relationship_id'), 1, false);


--
-- Name: quantificationprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE quantificationprop (
    quantificationprop_id serial NOT NULL,
    quantification_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE quantificationprop; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE quantificationprop IS 'extra quantification properties that are not accounted for in quantification';


--
-- Name: quantificationprop_quantificationprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('quantificationprop', 'quantificationprop_id'), 1, false);


--
-- Name: study; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE study (
    study_id serial NOT NULL,
    contact_id integer NOT NULL,
    pub_id integer,
    dbxref_id integer,
    name text NOT NULL,
    description text
);


--
-- Name: study_assay; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE study_assay (
    study_assay_id serial NOT NULL,
    study_id integer NOT NULL,
    assay_id integer NOT NULL
);


--
-- Name: study_assay_study_assay_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('study_assay', 'study_assay_id'), 1, false);


--
-- Name: study_study_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('study', 'study_id'), 1, false);


--
-- Name: studydesign; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE studydesign (
    studydesign_id serial NOT NULL,
    study_id integer NOT NULL,
    description text
);


--
-- Name: studydesign_studydesign_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('studydesign', 'studydesign_id'), 1, false);


--
-- Name: studydesignprop; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE studydesignprop (
    studydesignprop_id serial NOT NULL,
    studydesign_id integer NOT NULL,
    type_id integer NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: studydesignprop_studydesignprop_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('studydesignprop', 'studydesignprop_id'), 1, false);


--
-- Name: studyfactor; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE studyfactor (
    studyfactor_id serial NOT NULL,
    studydesign_id integer NOT NULL,
    type_id integer,
    name text NOT NULL,
    description text
);


--
-- Name: studyfactor_studyfactor_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('studyfactor', 'studyfactor_id'), 1, false);


--
-- Name: studyfactorvalue; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE studyfactorvalue (
    studyfactorvalue_id serial NOT NULL,
    studyfactor_id integer NOT NULL,
    assay_id integer NOT NULL,
    factorvalue text,
    name text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: studyfactorvalue_studyfactorvalue_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('studyfactorvalue', 'studyfactorvalue_id'), 1, false);


--
-- Name: synonym_synonym_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('synonym', 'synonym_id'), 1, false);


--
-- Name: tableinfo; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE tableinfo (
    tableinfo_id serial NOT NULL,
    name character varying(30) NOT NULL,
    primary_key_column character varying(30),
    is_view integer DEFAULT 0 NOT NULL,
    view_on_table_id integer,
    superclass_table_id integer,
    is_updateable integer DEFAULT 1 NOT NULL,
    modification_date date DEFAULT now() NOT NULL
);


--
-- Name: tableinfo_tableinfo_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('tableinfo', 'tableinfo_id'), 1, false);


--
-- Name: treatment; Type: TABLE; Schema: public; Owner: nassar; Tablespace: 
--

CREATE TABLE treatment (
    treatment_id serial NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    biomaterial_id integer NOT NULL,
    type_id integer NOT NULL,
    protocol_id integer,
    name text
);


--
-- Name: TABLE treatment; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON TABLE treatment IS 'a biomaterial may undergo multiple treatments.  this can range from apoxia to fluorophore and biotin labeling';


--
-- Name: treatment_treatment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: nassar
--

SELECT pg_catalog.setval(pg_catalog.pg_get_serial_sequence('treatment', 'treatment_id'), 1, false);


SET search_path = godb, pg_catalog;

--
-- Data for Name: db; Type: TABLE DATA; Schema: godb; Owner: nassar
--

COPY db (id, name, fullname, datatype, url_syntax) FROM stdin;
\.


--
-- Data for Name: dbxref; Type: TABLE DATA; Schema: godb; Owner: nassar
--

COPY dbxref (id, xref_dbname, xref_key, xref_keytype, xref_desc) FROM stdin;
\.


--
-- Data for Name: go_acc; Type: TABLE DATA; Schema: godb; Owner: nassar
--

COPY go_acc (dbxref_id, acc) FROM stdin;
\.


--
-- Data for Name: graph_path; Type: TABLE DATA; Schema: godb; Owner: nassar
--

COPY graph_path (id, term1_id, term2_id, distance) FROM stdin;
\.


--
-- Data for Name: instance_data; Type: TABLE DATA; Schema: godb; Owner: nassar
--

COPY instance_data (release_name, release_type, release_notes) FROM stdin;
\.


--
-- Data for Name: term; Type: TABLE DATA; Schema: godb; Owner: nassar
--

COPY term (id, acc, name, is_obsolete, is_root) FROM stdin;
\.


--
-- Data for Name: term2term; Type: TABLE DATA; Schema: godb; Owner: nassar
--

COPY term2term (id, relationship_type_id, term1_id, term2_id) FROM stdin;
\.


SET search_path = public, pg_catalog;

--
-- Data for Name: acquisition; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY acquisition (acquisition_id, assay_id, protocol_id, channel_id, acquisitiondate, name, uri) FROM stdin;
\.


--
-- Data for Name: acquisition_relationship; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY acquisition_relationship (acquisition_relationship_id, subject_id, type_id, object_id, value, rank) FROM stdin;
\.


--
-- Data for Name: acquisitionprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY acquisitionprop (acquisitionprop_id, acquisition_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: affymetrixcel; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixcel (elementresult_id, element_id, quantification_id, signal, mean, sd, pixels) FROM stdin;
\.


--
-- Data for Name: affymetrixdabg; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixdabg (elementresult_id, element_id, quantification_id, signal, call_p) FROM stdin;
\.


--
-- Data for Name: affymetrixdchip; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixdchip (elementresult_id, element_id, quantification_id, signal, z) FROM stdin;
\.


--
-- Data for Name: affymetrixgcrma; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixgcrma (elementresult_id, element_id, quantification_id, signal, z) FROM stdin;
\.


--
-- Data for Name: affymetrixmas5; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixmas5 (elementresult_id, element_id, quantification_id, signal, call, call_p, statpairs, statpairsused, z) FROM stdin;
\.


--
-- Data for Name: affymetrixplier; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixplier (elementresult_id, element_id, quantification_id, signal) FROM stdin;
\.


--
-- Data for Name: affymetrixprobe; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixprobe (element_id, feature_id, arraydesign_id, type_id, dbxref_id, name, affymetrixprobeset_id, "row", col) FROM stdin;
\.


--
-- Data for Name: affymetrixprobeset; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixprobeset (element_id, feature_id, arraydesign_id, type_id, dbxref_id, name) FROM stdin;
\.


--
-- Data for Name: affymetrixprobesetstat; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixprobesetstat (elementresult_id, element_id, quantification_id, signal, mean, median, quartile1, quartile3, sd, n) FROM stdin;
\.


--
-- Data for Name: affymetrixrma; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixrma (elementresult_id, element_id, quantification_id, signal, z) FROM stdin;
\.


--
-- Data for Name: affymetrixsea; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixsea (elementresult_id, element_id, quantification_id, signal) FROM stdin;
\.


--
-- Data for Name: affymetrixsnp; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixsnp (elementresult_id, element_id, quantification_id, signal, call) FROM stdin;
\.


--
-- Data for Name: affymetrixvsn; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY affymetrixvsn (elementresult_id, element_id, quantification_id, signal, z) FROM stdin;
\.


--
-- Data for Name: analysis; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY analysis (analysis_id, name, description, program, programversion, algorithm, sourcename, sourceversion, sourceuri, timeexecuted) FROM stdin;
1	dabg	\N	dabg	dabg	\N	\N	\N	\N	2006-02-22 09:54:00.415136
2	dchip	\N	dchip	dchip	\N	\N	\N	\N	2006-02-22 09:54:00.416431
3	gcrma	\N	gcrma	gcrma	\N	\N	\N	\N	2006-02-22 09:54:00.416999
4	mas5	\N	mas5	mas5	\N	\N	\N	\N	2006-02-22 09:54:00.41753
5	mpam	\N	mpam	mpam	\N	\N	\N	\N	2006-02-22 09:54:00.418059
6	plier	\N	plier	plier	\N	\N	\N	\N	2006-02-22 09:54:00.418588
7	rma	\N	rma	rma	\N	\N	\N	\N	2006-02-22 09:54:00.419118
8	sea	\N	sea	sea	\N	\N	\N	\N	2006-02-22 09:54:00.419654
9	vsn	\N	vsn	vsn	\N	\N	\N	\N	2006-02-22 09:54:00.420341
\.


--
-- Data for Name: analysisfeature; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY analysisfeature (analysisfeature_id, feature_id, analysis_id, rawscore, normscore, significance, identity) FROM stdin;
\.


--
-- Data for Name: analysisprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY analysisprop (analysisprop_id, analysis_id, type_id, value) FROM stdin;
\.


--
-- Data for Name: arraydesign; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY arraydesign (arraydesign_id, manufacturer_id, platformtype_id, substratetype_id, protocol_id, dbxref_id, name, version, description, array_dimensions, element_dimensions, num_of_elements, num_array_columns, num_array_rows, num_grid_columns, num_grid_rows, num_sub_columns, num_sub_rows) FROM stdin;
1	2	1	\N	\N	\N	unknown	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
2	2	1	\N	\N	\N	virtual array	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
3	1	8	7	\N	\N	Affymetrix_HG-U133_Plus_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
4	1	8	7	\N	\N	Affymetrix_HG-U133A	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
5	1	8	7	\N	\N	Affymetrix_HG-U133A_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
6	1	8	7	\N	\N	Affymetrix_HG-U133B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
7	1	8	7	\N	\N	Affymetrix_HG-U95Av2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
8	1	8	7	\N	\N	Affymetrix_HG-U95B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
9	1	8	7	\N	\N	Affymetrix_HG-U95C	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
10	1	8	7	\N	\N	Affymetrix_HG-U95D	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
11	1	8	7	\N	\N	Affymetrix_HG-U95E	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
12	1	8	7	\N	\N	Affymetrix_HuExon1	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
13	1	8	7	\N	\N	Affymetrix_HuGeneFL	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
14	1	8	7	\N	\N	Affymetrix_U74Av2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
15	1	8	7	\N	\N	Affymetrix_MG-U74Av2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
16	1	8	7	\N	\N	Affymetrix_MG-U74Bv2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
17	1	8	7	\N	\N	Affymetrix_MG-U74Cv2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
18	1	8	7	\N	\N	Affymetrix_RG-U34A	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
19	1	8	7	\N	\N	Affymetrix_RG-U34B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
20	1	8	7	\N	\N	Affymetrix_RG-U34C	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
21	1	8	7	\N	\N	Affymetrix_RT-U34	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
22	1	8	7	\N	\N	Affymetrix_RN-U34	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
23	1	8	7	\N	\N	Affymetrix_YG-S98	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
24	1	8	7	\N	\N	Affymetrix_Yeast_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
25	1	8	7	\N	\N	Affymetrix_RAE230A	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
26	1	8	7	\N	\N	Affymetrix_RAE230B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
27	1	8	7	\N	\N	Affymetrix_Rat230_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
28	1	8	7	\N	\N	Affymetrix_MOE430A	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
29	1	8	7	\N	\N	Affymetrix_MOE430B	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
30	1	8	7	\N	\N	Affymetrix_Mouse430_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
31	1	8	7	\N	\N	Affymetrix_Mouse430A_2	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
32	1	8	7	\N	\N	Affymetrix_ATH1-121501	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
33	1	8	7	\N	\N	Affymetrix_Mapping100K_Hind240	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
34	1	8	7	\N	\N	Affymetrix_Mapping100K_Xba240	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
35	1	8	7	\N	\N	Affymetrix_Mapping10K_Xba131	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
36	1	8	7	\N	\N	Affymetrix_Mapping10K_Xba142	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
37	1	8	7	\N	\N	Affymetrix_Mapping500K_NspI	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
38	1	8	7	\N	\N	Affymetrix_Mapping500K_StyI	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
\.


--
-- Data for Name: arraydesignprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY arraydesignprop (arraydesignprop_id, arraydesign_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: assay; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY assay (assay_id, arraydesign_id, protocol_id, assaydate, arrayidentifier, arraybatchidentifier, operator_id, dbxref_id, name, description) FROM stdin;
\.


--
-- Data for Name: assay_biomaterial; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY assay_biomaterial (assay_biomaterial_id, assay_id, biomaterial_id, channel_id, rank) FROM stdin;
\.


--
-- Data for Name: assay_project; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY assay_project (assay_project_id, assay_id, project_id) FROM stdin;
\.


--
-- Data for Name: assayprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY assayprop (assayprop_id, assay_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: biomaterial; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY biomaterial (biomaterial_id, taxon_id, biosourceprovider_id, dbxref_id, name, description) FROM stdin;
\.


--
-- Data for Name: biomaterial_dbxref; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY biomaterial_dbxref (biomaterial_dbxref_id, biomaterial_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: biomaterial_relationship; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY biomaterial_relationship (biomaterial_relationship_id, subject_id, type_id, object_id) FROM stdin;
\.


--
-- Data for Name: biomaterial_treatment; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY biomaterial_treatment (biomaterial_treatment_id, biomaterial_id, treatment_id, unittype_id, value, rank) FROM stdin;
\.


--
-- Data for Name: biomaterialprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY biomaterialprop (biomaterialprop_id, biomaterial_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: channel; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY channel (channel_id, name, definition) FROM stdin;
\.


--
-- Data for Name: contact; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY contact (contact_id, type_id, name, description) FROM stdin;
1	\N	Affymetrix	\N
2	\N	null	null
\.


--
-- Data for Name: contact_relationship; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY contact_relationship (contact_relationship_id, type_id, subject_id, object_id) FROM stdin;
\.


--
-- Data for Name: control; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY control (control_id, type_id, assay_id, tableinfo_id, row_id, name, value, rank) FROM stdin;
\.


--
-- Data for Name: cv; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY cv (cv_id, name, definition) FROM stdin;
1	null	\N
2	local	Locally created terms
3	Statistical Terms	Locally created terms for statistics
4	developmental stages	\N
5	autocreated	Terms that are automatically inserted by loading software
6	Sequence Ontology Feature Annotation	\N
7	Sequence Ontology	\N
\.


--
-- Data for Name: cvterm; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY cvterm (cvterm_id, cv_id, name, definition, dbxref_id, is_obsolete, is_relationshiptype) FROM stdin;
1	1	null	\N	1	0	0
2	1	Note	\N	2	0	0
3	1	Gap	\N	3	0	0
4	1	computer file	\N	4	0	0
5	1	synonym	\N	5	0	0
6	1	score	\N	6	0	0
7	2	glass	glass array	7	0	0
8	2	photochemical_oligo	in-situ photochemically synthesized oligoes	8	0	0
9	2	fetus	\N	9	0	0
10	4	neonate	\N	10	0	0
11	4	child	\N	11	0	0
12	4	adult_young	\N	12	0	0
13	4	adult	\N	13	0	0
14	4	adult_old	\N	14	0	0
15	2	survival_time	\N	15	0	0
16	3	n	sensu statistica	16	0	0
17	3	minimum	sensu statistica	17	0	0
18	3	maximum	sensu statistica	18	0	0
19	3	modality	sensu statistica	19	0	0
20	3	modality p	sensu statistica	20	0	0
21	3	mean	sensu statistica	21	0	0
22	3	median	sensu statistica	22	0	0
23	3	mode	sensu statistica	23	0	0
24	3	quartile 1	sensu statistica	24	0	0
25	3	quartile 3	sensu statistica	25	0	0
26	3	skewness	sensu statistica	26	0	0
27	3	kurtosis	sensu statistica	27	0	0
28	3	chi square p	sensu statistica	28	0	0
29	3	standard deviation	sensu statistica	29	0	0
30	3	expectation maximization gaussian mean	sensu statistica	30	0	0
31	3	expectation maximization p	sensu statistica	31	0	0
32	3	histogram	sensu statistica	32	0	0
33	6	is_a	IS_A relationship predicate (type)	33	0	1
34	6	part_of	PART_OF relationship predicate (type)	34	0	1
35	6	RELATED_TO	RELATED_TO relationship predicate (type)	35	0	1
36	6	derives_from	derives_from relationship predicate (type)	36	0	1
37	6	non_functional_homolog_of	non_functional_homolog_of relationship predicate (type)	37	0	1
38	6	member_of	member_of relationship predicate (type)	38	0	1
39	6	adjacent_to	adjacent_to relationship predicate (type)	39	0	1
40	6	Sequence_Ontology	\N	40	0	0
41	6	located_sequence_feature	\N	41	0	0
42	6	sequence_variant	\N	42	0	0
43	6	inversion	\N	43	0	0
44	6	insertion_site	\N	44	0	0
45	6	transposable_element_insertion_site	\N	45	0	0
46	6	insertion	\N	46	0	0
47	6	deletion	\N	47	0	0
48	6	substitution	\N	48	0	0
49	6	point_mutation	\N	49	0	0
50	6	SNP	\N	50	0	0
51	6	complex_substitution	\N	51	0	0
52	6	deletion_junction	\N	52	0	0
53	6	region	\N	53	0	0
54	6	intergenic_region	\N	54	0	0
55	6	chromosome	\N	55	0	0
56	6	chromosomal_structural_element	\N	56	0	0
57	6	telomere	\N	57	0	0
58	6	centromere	\N	58	0	0
59	6	modified_base_site	\N	59	0	0
60	6	methylated_base_feature	\N	60	0	0
61	6	methylated_C	\N	61	0	0
62	6	methylated_A	\N	62	0	0
63	6	match	\N	63	0	0
64	6	match_set	\N	64	0	0
65	6	match_part	\N	65	0	0
66	6	protein_match	\N	66	0	0
67	6	nucleotide_match	\N	67	0	0
68	6	translated_nucleotide_match	\N	68	0	0
69	6	expressed_sequence_match	\N	69	0	0
70	6	EST_match	\N	70	0	0
71	6	cDNA_match	\N	71	0	0
72	6	cross_genome_match	\N	72	0	0
73	6	gene_group	\N	73	0	0
74	6	regulon	\N	74	0	0
75	6	operon	\N	75	0	0
76	6	gene	\N	76	0	0
77	6	transcript	\N	77	0	0
78	6	pseudogenic_transcript	\N	78	0	0
79	6	pseudogenic_exon	\N	79	0	0
80	6	primary_transcript	\N	80	0	0
81	6	splice_site	\N	81	0	0
82	6	splice_acceptor_site	\N	82	0	0
83	6	trans_splice_acceptor_site	\N	83	0	0
84	6	splice_donor_site	\N	84	0	0
85	6	processed_transcript	\N	85	0	0
86	6	exon_junction	\N	86	0	0
87	6	ncRNA	\N	87	0	0
88	6	snoRNA	\N	88	0	0
89	6	Y_RNA	\N	89	0	0
90	6	tRNA	\N	90	0	0
91	6	rRNA	\N	91	0	0
92	6	rRNA_5S	\N	92	0	0
93	6	rRNA_5.8S	\N	93	0	0
94	6	rRNA_28S	\N	94	0	0
95	6	rRNA_18S	\N	95	0	0
96	6	small_regulatory_ncRNA	\N	96	0	0
97	6	miRNA	\N	97	0	0
98	6	rasiRNA	\N	98	0	0
99	6	vault_RNA	\N	99	0	0
100	6	enzymatic_RNA	\N	100	0	0
101	6	telomerase_RNA	\N	101	0	0
102	6	ribozyme	\N	102	0	0
103	6	RNase_P_RNA	\N	103	0	0
104	6	autocatalytically_spliced_intron	\N	104	0	0
105	6	hammerhead_ribozyme	\N	105	0	0
106	6	RNase_MRP_RNA	\N	106	0	0
107	6	SRP_RNA	\N	107	0	0
108	6	guide_RNA	\N	108	0	0
109	6	siRNA	\N	109	0	0
110	6	stRNA	\N	110	0	0
111	6	antisense_RNA	\N	111	0	0
112	6	snRNA	\N	112	0	0
113	6	U6atac_snRNA	\N	113	0	0
114	6	U4atac_snRNA	\N	114	0	0
115	6	U14_snRNA	\N	115	0	0
116	6	U6_snRNA	\N	116	0	0
117	6	U12_snRNA	\N	117	0	0
118	6	U1_snRNA	\N	118	0	0
119	6	U4_snRNA	\N	119	0	0
120	6	U11_snRNA	\N	120	0	0
121	6	U2_snRNA	\N	121	0	0
122	6	U5_snRNA	\N	122	0	0
123	6	scRNA	\N	123	0	0
124	6	mRNA	\N	124	0	0
125	6	UTR	\N	125	0	0
126	6	three_prime_UTR	\N	126	0	0
127	6	ribosome_entry_site	\N	127	0	0
128	6	five_prime_UTR	\N	128	0	0
129	6	cap	\N	129	0	0
130	6	CDS	\N	130	0	0
131	6	polypeptide	\N	131	0	0
132	6	transit_peptide	\N	132	0	0
133	6	mature_peptide	\N	133	0	0
134	6	signal_peptide	\N	134	0	0
135	6	polyA_sequence	\N	135	0	0
136	6	codon	\N	136	0	0
137	6	EST	\N	137	0	0
138	6	polyA_site	\N	138	0	0
139	6	clip	\N	139	0	0
140	6	transcription_end_site	\N	140	0	0
141	6	protein_coding_primary_transcript	\N	141	0	0
142	6	nc_primary_transcript	\N	142	0	0
143	6	antisense_primary_transcript	\N	143	0	0
144	6	transcription_start_site	\N	144	0	0
145	6	intron	\N	145	0	0
146	6	group_II_intron	\N	146	0	0
147	6	spliceosomal_intron	\N	147	0	0
148	6	branch_site	\N	148	0	0
149	6	polypyrimidine_tract	\N	149	0	0
150	6	group_I_intron	\N	150	0	0
151	6	exon	\N	151	0	0
152	6	decayed_exon	\N	152	0	0
153	6	non_transcribed_region	\N	153	0	0
154	6	regulatory_region	\N	154	0	0
155	6	insulator	\N	155	0	0
156	6	silencer	\N	156	0	0
157	6	polyA_signal_sequence	\N	157	0	0
158	6	gene_group_regulatory_region	\N	158	0	0
159	6	terminator	\N	159	0	0
160	6	attenuator	\N	160	0	0
161	6	operator	\N	161	0	0
162	6	promoter	\N	162	0	0
163	6	enhancer	\N	163	0	0
164	6	TF_binding_site	\N	164	0	0
165	6	splice_enhancer	\N	165	0	0
166	6	pseudogene	\N	166	0	0
167	6	repeat_region	\N	167	0	0
168	6	inverted_repeat	\N	168	0	0
169	6	tandem_repeat	\N	169	0	0
170	6	microsatellite	\N	170	0	0
171	6	minisatellite	\N	171	0	0
172	6	dispersed_repeat	\N	172	0	0
173	6	repeat_family	\N	173	0	0
174	6	transposable_element	\N	174	0	0
175	6	direct_repeat	\N	175	0	0
176	6	nuclease_sensitive_site	\N	176	0	0
177	6	ARS	\N	177	0	0
178	6	remark	\N	178	0	0
179	6	experimental_result_region	\N	179	0	0
180	6	sequence_difference	\N	180	0	0
181	6	possible_base_call_error	\N	181	0	0
182	6	possible_assembly_error	\N	182	0	0
183	6	nucleotide_motif	\N	183	0	0
184	6	assembly_component	\N	184	0	0
185	6	tiling_path_fragment	\N	185	0	0
186	6	read_pair	\N	186	0	0
187	6	read	\N	187	0	0
188	6	golden_path_fragment	\N	188	0	0
189	6	contig	\N	189	0	0
190	6	integrated_virus	\N	190	0	0
191	6	pseudogenic_region	\N	191	0	0
192	6	CpG_island	\N	192	0	0
193	6	origin_of_transfer	\N	193	0	0
194	6	flanking_region	\N	194	0	0
195	6	origin_of_replication	\N	195	0	0
196	6	reading_frame	\N	196	0	0
197	6	ORF	\N	197	0	0
198	6	assembly	\N	198	0	0
199	6	supercontig	\N	199	0	0
200	6	ultracontig	\N	200	0	0
201	6	gap	\N	201	0	0
202	6	tiling_path	\N	202	0	0
203	6	golden_path	\N	203	0	0
204	6	virtual_sequence	\N	204	0	0
205	6	binding_site	\N	205	0	0
206	6	reagent	\N	206	0	0
207	6	tag	\N	207	0	0
208	6	STS	\N	208	0	0
209	6	SAGE_tag	\N	209	0	0
210	6	databank_entry	\N	210	0	0
211	6	RNAi_reagent	\N	211	0	0
212	6	PCR_product	\N	212	0	0
213	6	oligo	\N	213	0	0
214	6	primer	\N	214	0	0
215	6	clone	\N	215	0	0
216	6	clone_start	\N	216	0	0
217	6	clone_end	\N	217	0	0
218	6	restriction_fragment	\N	218	0	0
219	6	RFLP_fragment	\N	219	0	0
220	6	junction	\N	220	0	0
\.


--
-- Data for Name: cvterm_dbxref; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY cvterm_dbxref (cvterm_dbxref_id, cvterm_id, dbxref_id, is_for_definition) FROM stdin;
\.


--
-- Data for Name: cvterm_relationship; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY cvterm_relationship (cvterm_relationship_id, type_id, subject_id, object_id) FROM stdin;
\.


--
-- Data for Name: cvtermpath; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY cvtermpath (cvtermpath_id, type_id, subject_id, object_id, cv_id, pathdistance) FROM stdin;
\.


--
-- Data for Name: cvtermprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY cvtermprop (cvtermprop_id, cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: cvtermsynonym; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY cvtermsynonym (cvtermsynonym_id, cvterm_id, synonym, type_id) FROM stdin;
1	42	mutation	\N
2	50	single_nucleotide_polymorphism	\N
3	53	sequence	\N
4	80	precursor_RNA	\N
5	82	acceptor	\N
6	82	acceptor_splice_site	\N
7	84	donor	\N
8	84	donor_splice_site	\N
9	87	noncoding_RNA	\N
10	88	small_nucleolar_RNA	\N
11	90	transfer_RNA	\N
12	91	ribsomal_RNA	\N
13	93	5.8S_rRNA	\N
14	94	23S_rRNA	\N
15	94	28S_rRNA	\N
16	95	16S_rRNA	\N
17	97	micro_RNA	\N
18	98	repeat associated small interfering RNA	\N
19	107	7S RNA	\N
20	107	signal_recognition_particle_RNA	\N
21	108	gRNA	\N
22	109	small_interfering_RNA	\N
23	110	small_temporal_RNA	\N
24	112	small_nuclear_RNA	\N
25	124	messenger_RNA	\N
26	125	untranslated_region	\N
27	126	three_prime_untranslated_region	\N
28	128	five_prime_untranslated_region	\N
29	130	coding_sequence	\N
30	134	signal peptide coding sequence	\N
31	137	expressed_sequence_tag @is_a@ reagent	\N
32	137	expressed_sequence_tag @derives_from@ mRNA	\N
33	141	pre-mRNA	\N
34	142	noncoding_primary_transcript	\N
35	144	TSS @part_of@ primary_transcript	\N
36	144	TSS @is_a@ junction	\N
37	148	branch_point	\N
38	155	insulator_element	\N
39	164	transcription_factor_binding_site	\N
40	172	interspersed_repeat	\N
41	177	autonomously_replicating_sequence	\N
42	192	CG_island	\N
43	193	oriT	\N
44	197	open_reading_frame	\N
45	199	scaffold @part_of@ ultracontig	\N
46	199	scaffold @is_a@ assembly	\N
47	208	sequence_tag_site	\N
48	210	accession	\N
49	212	amplicon	\N
50	213	oligonucleotide	\N
51	219	restriction_fragment_length_polymorphism	\N
52	220	boundary	\N
\.


--
-- Data for Name: db; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY db (db_id, name, description, urlprefix, url) FROM stdin;
1	null	a fake database for local items	\N	\N
2	GFF_source	A collection of sources (ie, column 2) from GFF files	\N	\N
3	ATCC	\N	\N	\N
4	DB:refseq	\N	\N	\N
5	DB:genbank	\N	\N	\N
6	DB:EMBL	\N	\N	\N
7	DB:TIGR	\N	\N	\N
8	DB:ucsc	\N	\N	\N
9	DB:ucla	\N	\N	\N
10	DB:SGD	\N	\N	\N
11	DB:PFAM	\N	\N	\N
12	DB:SUPERFAMILY	\N	\N	\N
13	DB:PROFILE	\N	\N	\N
14	DB:PRODOM	\N	\N	\N
15	DB:PRINTS	\N	\N	\N
16	DB:SMART	\N	\N	\N
17	DB:TIGRFAMs	\N	\N	\N
18	DB:PIR	\N	\N	\N
19	DB:Affymetrix_U133	\N	\N	\N
20	DB:Affymetrix_U133PLUS	\N	\N	\N
21	DB:Affymetrix_U95	\N	\N	\N
22	DB:LocusLink	\N	\N	\N
23	DB:RefSeq_protein	\N	\N	\N
24	DB:GenBank_protein	\N	\N	\N
25	DB:OMIM	\N	\N	\N
26	DB:Swiss	\N	\N	\N
27	DB:RefSNP	\N	\N	\N
28	DB:TSC	\N	\N	\N
29	DB:GR	Gramene	\N	\N
30	DB:uniprot	UniProt/TrEMBL	http://us.expasy.org/cgi-bin/niceprot.pl?	\N
31	DB:refseq:mrna	RefSeq mRNA	http://http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=search&db=nucleotide&dopt=GenBank&term=	\N
32	DB:refseq:protein	RefSeq Protein	http://http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=search&db=protein&dopt=GenBank&term=	\N
33	DB:unigene	Unigene	http://http://www.ncbi.nih.gov/entrez/query.fcgi?db=unigene&cmd=search&term=	\N
34	DB:omim	OMIM	http://http://www.ncbi.nlm.nih.gov/entrez/dispomim.cgi?id=	\N
35	DB:locuslink	LocusLink	http://http://www.ncbi.nlm.nih.gov/LocusLink/LocRpt.cgi?l=	\N
36	DB:genbank:mrna	GenBank mRNA	http://http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=search&db=nucleotide&dopt=GenBank&term=	\N
37	DB:genbank:protein	GenBank Protein	http://http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=search&db=protein&dopt=GenBank&term=	\N
38	DB:swissprot:display	SwissProt	http://http://us.expasy.org/cgi-bin/niceprot.pl?	\N
39	DB:pfam	Pfam	http://http://www.sanger.ac.uk/cgi-bin/Pfam/dql.pl?query=	\N
40	Sequence Ontology Feature Annotation	\N	\N	\N
41	Sequence Ontology	\N	\N	\N
\.


--
-- Data for Name: dbxref; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY dbxref (dbxref_id, db_id, accession, version, description) FROM stdin;
1	1	local:null		\N
2	1	local:Note		\N
3	1	local:Gap		\N
4	1	local:computer file		\N
5	1	local:synonym		\N
6	1	local:score		\N
7	1	local:glass		\N
8	1	local:photochemical_oligo		\N
9	1	developmental stages:fetus		\N
10	1	developmental stages:neonate		\N
11	1	developmental stages:child		\N
12	1	developmental stages:adult_young		\N
13	1	developmental stages:adult		\N
14	1	developmental stages:adult_old		\N
15	1	local:survival_time		\N
16	1	Statistical Terms:n		\N
17	1	Statistical Terms:minimum		\N
18	1	Statistical Terms:maximum		\N
19	1	Statistical Terms:modality		\N
20	1	Statistical Terms:modality p		\N
21	1	Statistical Terms:mean		\N
22	1	Statistical Terms:median		\N
23	1	Statistical Terms:mode		\N
24	1	Statistical Terms:quartile 1		\N
25	1	Statistical Terms:quartile 3		\N
26	1	Statistical Terms:skewness		\N
27	1	Statistical Terms:kurtosis		\N
28	1	Statistical Terms:chi square p		\N
29	1	Statistical Terms:standard deviation		\N
30	1	Statistical Terms:expectation maximization gaussian mean		\N
31	1	Statistical Terms:expectation maximization p		\N
32	1	Statistical Terms:histogram		\N
33	40	OBO_REL:0002		\N
34	40	OBO_REL:0003		\N
35	40	RELATED_TO		\N
36	40	derives_from		\N
37	40	non_functional_homolog_of		\N
38	40	member_of		\N
39	40	adjacent_to		\N
40	40	SO:0000000		\N
41	40	0000110		\N
42	40	0000109		\N
43	40	1000036		\N
44	40	0000366		\N
45	40	0000368		\N
46	40	0000667		\N
47	40	0000159		\N
48	40	1000002		\N
49	40	1000008		\N
50	40	0000694		\N
51	40	1000005		\N
52	40	0000687		\N
53	40	0000001		\N
54	40	0000605		\N
55	40	0000340		\N
56	40	0000628		\N
57	40	0000624		\N
58	40	0000577		\N
59	40	0000305		\N
60	40	0000306		\N
61	40	0000114		\N
62	40	0000161		\N
63	40	0000343		\N
64	40	0000038		\N
65	40	0000039		\N
66	40	0000349		\N
67	40	0000347		\N
68	40	0000181		\N
69	40	0000102		\N
70	40	0000668		\N
71	40	0000689		\N
72	40	0000177		\N
73	40	0005855		\N
74	40	1001284		\N
75	40	0000178		\N
76	40	0000704		\N
77	40	0000673		\N
78	40	0000516		\N
79	40	0000507		\N
80	40	0000185		\N
81	40	0000162		\N
82	40	0000164		\N
83	40	0000706		\N
84	40	0000163		\N
85	40	0000233		\N
86	40	0000333		\N
87	40	0000655		\N
88	40	0000275		\N
89	40	0000405		\N
90	40	0000253		\N
91	40	0000252		\N
92	40	0000652		\N
93	40	0000375		\N
94	40	0000653		\N
95	40	0000407		\N
96	40	0000370		\N
97	40	0000276		\N
98	40	0000454		\N
99	40	0000404		\N
100	40	0000372		\N
101	40	0000390		\N
102	40	0000374		\N
103	40	0000386		\N
104	40	0000588		\N
105	40	0000380		\N
106	40	0000385		\N
107	40	0000590		\N
108	40	0000602		\N
109	40	0000646		\N
110	40	0000649		\N
111	40	0000644		\N
112	40	0000274		\N
113	40	0000397		\N
114	40	0000394		\N
115	40	0000403		\N
116	40	0000396		\N
117	40	0000399		\N
118	40	0000391		\N
119	40	0000393		\N
120	40	0000398		\N
121	40	0000392		\N
122	40	0000395		\N
123	40	0000013		\N
124	40	0000234		\N
125	40	0000203		\N
126	40	0000205		\N
127	40	0000139		\N
128	40	0000204		\N
129	40	0000581		\N
130	40	0000316		\N
131	40	0000104		\N
132	40	0000725		\N
133	40	0000419		\N
134	40	0000418		\N
135	40	0000610		\N
136	40	0000360		\N
137	40	0000345		\N
138	40	0000553		\N
139	40	0000303		\N
140	40	0000616		\N
141	40	0000120		\N
142	40	0000483		\N
143	40	0000645		\N
144	40	0000315		\N
145	40	0000188		\N
146	40	0000603		\N
147	40	0000662		\N
148	40	0000611		\N
149	40	0000612		\N
150	40	0000587		\N
151	40	0000147		\N
152	40	0000464		\N
153	40	0000183		\N
154	40	0005836		\N
155	40	0000627		\N
156	40	0000625		\N
157	40	0000551		\N
158	40	0000752		\N
159	40	0000141		\N
160	40	0000140		\N
161	40	0000057		\N
162	40	0000167		\N
163	40	0000165		\N
164	40	0000235		\N
165	40	0000344		\N
166	40	0000336		\N
167	40	0000657		\N
168	40	0000294		\N
169	40	0000705		\N
170	40	0000289		\N
171	40	0000643		\N
172	40	0000658		\N
173	40	0000187		\N
174	40	0000101		\N
175	40	0000314		\N
176	40	0000684		\N
177	40	0000436		\N
178	40	0000700		\N
179	40	0000703		\N
180	40	0000413		\N
181	40	0000701		\N
182	40	0000702		\N
183	40	0000714		\N
184	40	0000143		\N
185	40	0000474		\N
186	40	0000007		\N
187	40	0000150		\N
188	40	0000468		\N
189	40	0000149		\N
190	40	0000113		\N
191	40	0000462		\N
192	40	0000307		\N
193	40	0000724		\N
194	40	0000239		\N
195	40	0000296		\N
196	40	0000717		\N
197	40	0000236		\N
198	40	0000353		\N
199	40	0000148		\N
200	40	0000719		\N
201	40	0000730		\N
202	40	0000472		\N
203	40	0000688		\N
204	40	0000499		\N
205	40	0000409		\N
206	40	0000695		\N
207	40	0000324		\N
208	40	0000331		\N
209	40	0000326		\N
210	40	2000061		\N
211	40	0000337		\N
212	40	0000006		\N
213	40	0000696		\N
214	40	0000112		\N
215	40	0000151		\N
216	40	0000179		\N
217	40	0000103		\N
218	40	0000412		\N
219	40	0000193		\N
220	40	0000699		\N
\.


--
-- Data for Name: dbxrefprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY dbxrefprop (dbxrefprop_id, dbxref_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: eimage; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY eimage (eimage_id, eimage_data, eimage_type, image_uri) FROM stdin;
\.


--
-- Data for Name: element; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY element (element_id, feature_id, arraydesign_id, type_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: element_relationship; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY element_relationship (element_relationship_id, subject_id, type_id, object_id, value, rank) FROM stdin;
\.


--
-- Data for Name: elementresult; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY elementresult (elementresult_id, element_id, quantification_id, signal) FROM stdin;
\.


--
-- Data for Name: elementresult_relationship; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY elementresult_relationship (elementresult_relationship_id, subject_id, type_id, object_id, value, rank) FROM stdin;
\.


--
-- Data for Name: environment; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY environment (environment_id, uniquename, description) FROM stdin;
\.


--
-- Data for Name: environment_cvterm; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY environment_cvterm (environment_cvterm_id, environment_id, cvterm_id) FROM stdin;
\.


--
-- Data for Name: expression; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY expression (expression_id, description) FROM stdin;
\.


--
-- Data for Name: expression_cvterm; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY expression_cvterm (expression_cvterm_id, expression_id, cvterm_id, rank, cvterm_type) FROM stdin;
\.


--
-- Data for Name: expression_image; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY expression_image (expression_image_id, expression_id, eimage_id) FROM stdin;
\.


--
-- Data for Name: expression_pub; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY expression_pub (expression_pub_id, expression_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature (feature_id, dbxref_id, organism_id, name, uniquename, residues, seqlen, md5checksum, type_id, is_analysis, is_obsolete, timeaccessioned, timelastmodified) FROM stdin;
\.


--
-- Data for Name: feature_cvterm; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_cvterm (feature_cvterm_id, feature_id, cvterm_id, pub_id, is_not) FROM stdin;
\.


--
-- Data for Name: feature_cvterm_dbxref; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_cvterm_dbxref (feature_cvterm_dbxref_id, feature_cvterm_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: feature_cvterm_pub; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_cvterm_pub (feature_cvterm_pub_id, feature_cvterm_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature_cvtermprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_cvtermprop (feature_cvtermprop_id, feature_cvterm_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: feature_dbxref; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_dbxref (feature_dbxref_id, feature_id, dbxref_id, is_current) FROM stdin;
\.


--
-- Data for Name: feature_expression; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_expression (feature_expression_id, expression_id, feature_id) FROM stdin;
\.


--
-- Data for Name: feature_genotype; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_genotype (feature_genotype_id, feature_id, genotype_id, chromosome_id, rank, cgroup, cvterm_id) FROM stdin;
\.


--
-- Data for Name: feature_phenotype; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_phenotype (feature_phenotype_id, feature_id, phenotype_id) FROM stdin;
\.


--
-- Data for Name: feature_pub; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_pub (feature_pub_id, feature_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature_relationship; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_relationship (feature_relationship_id, subject_id, object_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: feature_relationship_pub; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_relationship_pub (feature_relationship_pub_id, feature_relationship_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature_relationshipprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_relationshipprop (feature_relationshipprop_id, feature_relationship_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: feature_relationshipprop_pub; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_relationshipprop_pub (feature_relationshipprop_pub_id, feature_relationshipprop_id, pub_id) FROM stdin;
\.


--
-- Data for Name: feature_synonym; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY feature_synonym (feature_synonym_id, synonym_id, feature_id, pub_id, is_current, is_internal) FROM stdin;
\.


--
-- Data for Name: featureloc; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY featureloc (featureloc_id, feature_id, srcfeature_id, fmin, is_fmin_partial, fmax, is_fmax_partial, strand, phase, residue_info, locgroup, rank) FROM stdin;
\.


--
-- Data for Name: featuremap; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY featuremap (featuremap_id, name, description, unittype_id) FROM stdin;
\.


--
-- Data for Name: featuremap_pub; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY featuremap_pub (featuremap_pub_id, featuremap_id, pub_id) FROM stdin;
\.


--
-- Data for Name: featurepos; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY featurepos (featurepos_id, featuremap_id, feature_id, map_feature_id, mappos) FROM stdin;
\.


--
-- Data for Name: featureprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY featureprop (featureprop_id, feature_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: featureprop_pub; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY featureprop_pub (featureprop_pub_id, featureprop_id, pub_id) FROM stdin;
\.


--
-- Data for Name: featurerange; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY featurerange (featurerange_id, featuremap_id, feature_id, leftstartf_id, leftendf_id, rightstartf_id, rightendf_id, rangestr) FROM stdin;
\.


--
-- Data for Name: genotype; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY genotype (genotype_id, uniquename, description) FROM stdin;
\.


--
-- Data for Name: library; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY library (library_id, organism_id, name, uniquename, type_id) FROM stdin;
\.


--
-- Data for Name: library_cvterm; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY library_cvterm (library_cvterm_id, library_id, cvterm_id, pub_id) FROM stdin;
\.


--
-- Data for Name: library_feature; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY library_feature (library_feature_id, library_id, feature_id) FROM stdin;
\.


--
-- Data for Name: library_pub; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY library_pub (library_pub_id, library_id, pub_id) FROM stdin;
\.


--
-- Data for Name: library_synonym; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY library_synonym (library_synonym_id, synonym_id, library_id, pub_id, is_current, is_internal) FROM stdin;
\.


--
-- Data for Name: libraryprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY libraryprop (libraryprop_id, library_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: magedocumentation; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY magedocumentation (magedocumentation_id, mageml_id, tableinfo_id, row_id, mageidentifier) FROM stdin;
\.


--
-- Data for Name: mageml; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY mageml (mageml_id, mage_package, mage_ml) FROM stdin;
\.


--
-- Data for Name: organism; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY organism (organism_id, abbreviation, genus, species, common_name, "comment") FROM stdin;
\.


--
-- Data for Name: organism_dbxref; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY organism_dbxref (organism_dbxref_id, organism_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: organismprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY organismprop (organismprop_id, organism_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: phendesc; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY phendesc (phendesc_id, genotype_id, environment_id, description, pub_id) FROM stdin;
\.


--
-- Data for Name: phenotype; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY phenotype (phenotype_id, uniquename, observable_id, attr_id, value, cvalue_id, assay_id) FROM stdin;
\.


--
-- Data for Name: phenotype_comparison; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY phenotype_comparison (phenotype_comparison_id, genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, phenotype2_id, type_id, pub_id) FROM stdin;
\.


--
-- Data for Name: phenotype_cvterm; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY phenotype_cvterm (phenotype_cvterm_id, phenotype_id, cvterm_id) FROM stdin;
\.


--
-- Data for Name: phenstatement; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY phenstatement (phenstatement_id, genotype_id, environment_id, phenotype_id, type_id, pub_id) FROM stdin;
\.


--
-- Data for Name: project; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY project (project_id, name, description) FROM stdin;
\.


--
-- Data for Name: protocol; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY protocol (protocol_id, type_id, pub_id, dbxref_id, name, uri, protocoldescription, hardwaredescription, softwaredescription) FROM stdin;
\.


--
-- Data for Name: protocolparam; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY protocolparam (protocolparam_id, protocol_id, name, datatype_id, unittype_id, value, rank) FROM stdin;
\.


--
-- Data for Name: pub; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY pub (pub_id, title, volumetitle, volume, series_name, issue, pyear, pages, miniref, uniquename, type_id, is_obsolete, publisher, pubplace) FROM stdin;
1	\N	\N	\N	\N	\N	\N	\N	null	null	1	f	\N	\N
\.


--
-- Data for Name: pub_dbxref; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY pub_dbxref (pub_dbxref_id, pub_id, dbxref_id) FROM stdin;
\.


--
-- Data for Name: pub_relationship; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY pub_relationship (pub_relationship_id, subject_id, object_id, type_id) FROM stdin;
\.


--
-- Data for Name: pubauthor; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY pubauthor (pubauthor_id, pub_id, rank, editor, surname, givennames, suffix) FROM stdin;
\.


--
-- Data for Name: pubprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY pubprop (pubprop_id, pub_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: quantification; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY quantification (quantification_id, acquisition_id, operator_id, protocol_id, analysis_id, quantificationdate, name, uri) FROM stdin;
\.


--
-- Data for Name: quantification_relationship; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY quantification_relationship (quantification_relationship_id, subject_id, type_id, object_id) FROM stdin;
\.


--
-- Data for Name: quantificationprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY quantificationprop (quantificationprop_id, quantification_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: study; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY study (study_id, contact_id, pub_id, dbxref_id, name, description) FROM stdin;
\.


--
-- Data for Name: study_assay; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY study_assay (study_assay_id, study_id, assay_id) FROM stdin;
\.


--
-- Data for Name: studydesign; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY studydesign (studydesign_id, study_id, description) FROM stdin;
\.


--
-- Data for Name: studydesignprop; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY studydesignprop (studydesignprop_id, studydesign_id, type_id, value, rank) FROM stdin;
\.


--
-- Data for Name: studyfactor; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY studyfactor (studyfactor_id, studydesign_id, type_id, name, description) FROM stdin;
\.


--
-- Data for Name: studyfactorvalue; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY studyfactorvalue (studyfactorvalue_id, studyfactor_id, assay_id, factorvalue, name, rank) FROM stdin;
\.


--
-- Data for Name: synonym; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY synonym (synonym_id, name, type_id, synonym_sgml) FROM stdin;
\.


--
-- Data for Name: tableinfo; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY tableinfo (tableinfo_id, name, primary_key_column, is_view, view_on_table_id, superclass_table_id, is_updateable, modification_date) FROM stdin;
\.


--
-- Data for Name: treatment; Type: TABLE DATA; Schema: public; Owner: nassar
--

COPY treatment (treatment_id, rank, biomaterial_id, type_id, protocol_id, name) FROM stdin;
\.


--
-- Name: acquisition_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_c1 UNIQUE (name);


--
-- Name: acquisition_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_pkey PRIMARY KEY (acquisition_id);


--
-- Name: acquisition_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: acquisition_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_pkey PRIMARY KEY (acquisition_relationship_id);


--
-- Name: acquisitionprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY acquisitionprop
    ADD CONSTRAINT acquisitionprop_c1 UNIQUE (acquisition_id, type_id, rank);


--
-- Name: acquisitionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY acquisitionprop
    ADD CONSTRAINT acquisitionprop_pkey PRIMARY KEY (acquisitionprop_id);


--
-- Name: affymetrixprobe_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY affymetrixprobe
    ADD CONSTRAINT affymetrixprobe_pkey PRIMARY KEY (element_id);


--
-- Name: affymetrixprobeset_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY affymetrixprobeset
    ADD CONSTRAINT affymetrixprobeset_pkey PRIMARY KEY (element_id);


--
-- Name: analysis_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY analysis
    ADD CONSTRAINT analysis_c1 UNIQUE (program, programversion, sourcename);


--
-- Name: analysis_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY analysis
    ADD CONSTRAINT analysis_pkey PRIMARY KEY (analysis_id);


--
-- Name: analysisfeature_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_c1 UNIQUE (feature_id, analysis_id);


--
-- Name: analysisfeature_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_pkey PRIMARY KEY (analysisfeature_id);


--
-- Name: analysisprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_c1 UNIQUE (analysis_id, type_id, value);


--
-- Name: analysisprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_pkey PRIMARY KEY (analysisprop_id);


--
-- Name: arraydesign_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_c1 UNIQUE (name);


--
-- Name: arraydesign_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_pkey PRIMARY KEY (arraydesign_id);


--
-- Name: arraydesignprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY arraydesignprop
    ADD CONSTRAINT arraydesignprop_c1 UNIQUE (arraydesign_id, type_id, rank);


--
-- Name: arraydesignprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY arraydesignprop
    ADD CONSTRAINT arraydesignprop_pkey PRIMARY KEY (arraydesignprop_id);


--
-- Name: assay_biomaterial_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_c1 UNIQUE (assay_id, biomaterial_id, channel_id, rank);


--
-- Name: assay_biomaterial_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_pkey PRIMARY KEY (assay_biomaterial_id);


--
-- Name: assay_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_c1 UNIQUE (name);


--
-- Name: assay_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_pkey PRIMARY KEY (assay_id);


--
-- Name: assay_project_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY assay_project
    ADD CONSTRAINT assay_project_c1 UNIQUE (assay_id, project_id);


--
-- Name: assay_project_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY assay_project
    ADD CONSTRAINT assay_project_pkey PRIMARY KEY (assay_project_id);


--
-- Name: assayprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY assayprop
    ADD CONSTRAINT assayprop_c1 UNIQUE (assay_id, type_id, rank);


--
-- Name: assayprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY assayprop
    ADD CONSTRAINT assayprop_pkey PRIMARY KEY (assayprop_id);


--
-- Name: biomaterial_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_c1 UNIQUE (name);


--
-- Name: biomaterial_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_c1 UNIQUE (biomaterial_id, dbxref_id);


--
-- Name: biomaterial_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_pkey PRIMARY KEY (biomaterial_dbxref_id);


--
-- Name: biomaterial_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_pkey PRIMARY KEY (biomaterial_id);


--
-- Name: biomaterial_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: biomaterial_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_pkey PRIMARY KEY (biomaterial_relationship_id);


--
-- Name: biomaterial_treatment_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_c1 UNIQUE (biomaterial_id, treatment_id);


--
-- Name: biomaterial_treatment_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_pkey PRIMARY KEY (biomaterial_treatment_id);


--
-- Name: biomaterialprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterialprop
    ADD CONSTRAINT biomaterialprop_c1 UNIQUE (biomaterial_id, type_id, rank);


--
-- Name: biomaterialprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY biomaterialprop
    ADD CONSTRAINT biomaterialprop_pkey PRIMARY KEY (biomaterialprop_id);


--
-- Name: channel_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY channel
    ADD CONSTRAINT channel_c1 UNIQUE (name);


--
-- Name: channel_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY channel
    ADD CONSTRAINT channel_pkey PRIMARY KEY (channel_id);


--
-- Name: contact_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY contact
    ADD CONSTRAINT contact_c1 UNIQUE (name);


--
-- Name: contact_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY contact
    ADD CONSTRAINT contact_pkey PRIMARY KEY (contact_id);


--
-- Name: contact_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: contact_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_pkey PRIMARY KEY (contact_relationship_id);


--
-- Name: control_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY control
    ADD CONSTRAINT control_pkey PRIMARY KEY (control_id);


--
-- Name: cv_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cv
    ADD CONSTRAINT cv_c1 UNIQUE (name);


--
-- Name: cv_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cv
    ADD CONSTRAINT cv_pkey PRIMARY KEY (cv_id);


--
-- Name: cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_c1 UNIQUE (name, cv_id, is_obsolete);


--
-- Name: cvterm_c2; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_c2 UNIQUE (dbxref_id);


--
-- Name: cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_c1 UNIQUE (cvterm_id, dbxref_id);


--
-- Name: cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_pkey PRIMARY KEY (cvterm_dbxref_id);


--
-- Name: cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_pkey PRIMARY KEY (cvterm_id);


--
-- Name: cvterm_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: cvterm_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_pkey PRIMARY KEY (cvterm_relationship_id);


--
-- Name: cvtermpath_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_c1 UNIQUE (subject_id, object_id, type_id, pathdistance);


--
-- Name: cvtermpath_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_pkey PRIMARY KEY (cvtermpath_id);


--
-- Name: cvtermprop_cvterm_id_key; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_key UNIQUE (cvterm_id, type_id, value, rank);


--
-- Name: cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_pkey PRIMARY KEY (cvtermprop_id);


--
-- Name: cvtermsynonym_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_c1 UNIQUE (cvterm_id, synonym);


--
-- Name: cvtermsynonym_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_pkey PRIMARY KEY (cvtermsynonym_id);


--
-- Name: db_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY db
    ADD CONSTRAINT db_c1 UNIQUE (name);


--
-- Name: db_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY db
    ADD CONSTRAINT db_pkey PRIMARY KEY (db_id);


--
-- Name: dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_c1 UNIQUE (db_id, accession, version);


--
-- Name: dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_pkey PRIMARY KEY (dbxref_id);


--
-- Name: dbxrefprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_c1 UNIQUE (dbxref_id, type_id, rank);


--
-- Name: dbxrefprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_pkey PRIMARY KEY (dbxrefprop_id);


--
-- Name: eimage_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY eimage
    ADD CONSTRAINT eimage_pkey PRIMARY KEY (eimage_id);


--
-- Name: element_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_c1 UNIQUE (feature_id, arraydesign_id);


--
-- Name: element_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_pkey PRIMARY KEY (element_id);


--
-- Name: element_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: element_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_pkey PRIMARY KEY (element_relationship_id);


--
-- Name: elementresult_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY elementresult
    ADD CONSTRAINT elementresult_c1 UNIQUE (element_id, quantification_id);


--
-- Name: elementresult_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY elementresult
    ADD CONSTRAINT elementresult_pkey PRIMARY KEY (elementresult_id);


--
-- Name: elementresult_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: elementresult_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_pkey PRIMARY KEY (elementresult_relationship_id);


--
-- Name: environment_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY environment
    ADD CONSTRAINT environment_c1 UNIQUE (uniquename);


--
-- Name: environment_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_c1 UNIQUE (environment_id, cvterm_id);


--
-- Name: environment_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_pkey PRIMARY KEY (environment_cvterm_id);


--
-- Name: environment_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY environment
    ADD CONSTRAINT environment_pkey PRIMARY KEY (environment_id);


--
-- Name: expression_cvterm_expression_id_key; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_expression_id_key UNIQUE (expression_id, cvterm_id);


--
-- Name: expression_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_pkey PRIMARY KEY (expression_cvterm_id);


--
-- Name: expression_image_expression_id_key; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY expression_image
    ADD CONSTRAINT expression_image_expression_id_key UNIQUE (expression_id, eimage_id);


--
-- Name: expression_image_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY expression_image
    ADD CONSTRAINT expression_image_pkey PRIMARY KEY (expression_image_id);


--
-- Name: expression_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY expression
    ADD CONSTRAINT expression_pkey PRIMARY KEY (expression_id);


--
-- Name: expression_pub_expression_id_key; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY expression_pub
    ADD CONSTRAINT expression_pub_expression_id_key UNIQUE (expression_id, pub_id);


--
-- Name: expression_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY expression_pub
    ADD CONSTRAINT expression_pub_pkey PRIMARY KEY (expression_pub_id);


--
-- Name: feature_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: feature_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_c1 UNIQUE (feature_id, cvterm_id, pub_id);


--
-- Name: feature_cvterm_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_c1 UNIQUE (feature_cvterm_id, dbxref_id);


--
-- Name: feature_cvterm_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_pkey PRIMARY KEY (feature_cvterm_dbxref_id);


--
-- Name: feature_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_pkey PRIMARY KEY (feature_cvterm_id);


--
-- Name: feature_cvterm_pub_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_c1 UNIQUE (feature_cvterm_id, pub_id);


--
-- Name: feature_cvterm_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pkey PRIMARY KEY (feature_cvterm_pub_id);


--
-- Name: feature_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_c1 UNIQUE (feature_cvterm_id, type_id, rank);


--
-- Name: feature_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_pkey PRIMARY KEY (feature_cvtermprop_id);


--
-- Name: feature_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_c1 UNIQUE (feature_id, dbxref_id);


--
-- Name: feature_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_pkey PRIMARY KEY (feature_dbxref_id);


--
-- Name: feature_expression_expression_id_key; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_expression
    ADD CONSTRAINT feature_expression_expression_id_key UNIQUE (expression_id, feature_id);


--
-- Name: feature_expression_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_expression
    ADD CONSTRAINT feature_expression_pkey PRIMARY KEY (feature_expression_id);


--
-- Name: feature_genotype_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_c1 UNIQUE (feature_id, genotype_id, cvterm_id);


--
-- Name: feature_genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_pkey PRIMARY KEY (feature_genotype_id);


--
-- Name: feature_phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_phenotype
    ADD CONSTRAINT feature_phenotype_c1 UNIQUE (feature_id, phenotype_id);


--
-- Name: feature_phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_phenotype
    ADD CONSTRAINT feature_phenotype_pkey PRIMARY KEY (feature_phenotype_id);


--
-- Name: feature_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_pkey PRIMARY KEY (feature_id);


--
-- Name: feature_pub_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_c1 UNIQUE (feature_id, pub_id);


--
-- Name: feature_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_pkey PRIMARY KEY (feature_pub_id);


--
-- Name: feature_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: feature_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_pkey PRIMARY KEY (feature_relationship_id);


--
-- Name: feature_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_c1 UNIQUE (feature_relationship_id, pub_id);


--
-- Name: feature_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pkey PRIMARY KEY (feature_relationship_pub_id);


--
-- Name: feature_relationshipprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_c1 UNIQUE (feature_relationship_id, type_id, rank);


--
-- Name: feature_relationshipprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_pkey PRIMARY KEY (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_c1 UNIQUE (feature_relationshipprop_id, pub_id);


--
-- Name: feature_relationshipprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pkey PRIMARY KEY (feature_relationshipprop_pub_id);


--
-- Name: feature_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_c1 UNIQUE (synonym_id, feature_id, pub_id);


--
-- Name: feature_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_pkey PRIMARY KEY (feature_synonym_id);


--
-- Name: featureloc_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_c1 UNIQUE (feature_id, locgroup, rank);


--
-- Name: featureloc_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_pkey PRIMARY KEY (featureloc_id);


--
-- Name: featuremap_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featuremap
    ADD CONSTRAINT featuremap_c1 UNIQUE (name);


--
-- Name: featuremap_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featuremap
    ADD CONSTRAINT featuremap_pkey PRIMARY KEY (featuremap_id);


--
-- Name: featuremap_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featuremap_pub
    ADD CONSTRAINT featuremap_pub_pkey PRIMARY KEY (featuremap_pub_id);


--
-- Name: featurepos_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featurepos
    ADD CONSTRAINT featurepos_pkey PRIMARY KEY (featurepos_id);


--
-- Name: featureprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_c1 UNIQUE (feature_id, type_id, rank);


--
-- Name: featureprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_pkey PRIMARY KEY (featureprop_id);


--
-- Name: featureprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_c1 UNIQUE (featureprop_id, pub_id);


--
-- Name: featureprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_pkey PRIMARY KEY (featureprop_pub_id);


--
-- Name: featurerange_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_pkey PRIMARY KEY (featurerange_id);


--
-- Name: genotype_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_c1 UNIQUE (uniquename);


--
-- Name: genotype_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY genotype
    ADD CONSTRAINT genotype_pkey PRIMARY KEY (genotype_id);


--
-- Name: library_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_c1 UNIQUE (organism_id, uniquename, type_id);


--
-- Name: library_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_c1 UNIQUE (library_id, cvterm_id, pub_id);


--
-- Name: library_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_pkey PRIMARY KEY (library_cvterm_id);


--
-- Name: library_feature_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library_feature
    ADD CONSTRAINT library_feature_c1 UNIQUE (library_id, feature_id);


--
-- Name: library_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library_feature
    ADD CONSTRAINT library_feature_pkey PRIMARY KEY (library_feature_id);


--
-- Name: library_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_pkey PRIMARY KEY (library_id);


--
-- Name: library_pub_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library_pub
    ADD CONSTRAINT library_pub_c1 UNIQUE (library_id, pub_id);


--
-- Name: library_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library_pub
    ADD CONSTRAINT library_pub_pkey PRIMARY KEY (library_pub_id);


--
-- Name: library_synonym_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_c1 UNIQUE (synonym_id, library_id, pub_id);


--
-- Name: library_synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_pkey PRIMARY KEY (library_synonym_id);


--
-- Name: libraryprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY libraryprop
    ADD CONSTRAINT libraryprop_c1 UNIQUE (library_id, type_id, rank);


--
-- Name: libraryprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY libraryprop
    ADD CONSTRAINT libraryprop_pkey PRIMARY KEY (libraryprop_id);


--
-- Name: magedocumentation_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY magedocumentation
    ADD CONSTRAINT magedocumentation_pkey PRIMARY KEY (magedocumentation_id);


--
-- Name: mageml_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY mageml
    ADD CONSTRAINT mageml_pkey PRIMARY KEY (mageml_id);


--
-- Name: organism_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_c1 UNIQUE (genus, species);


--
-- Name: organism_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_c1 UNIQUE (organism_id, dbxref_id);


--
-- Name: organism_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_pkey PRIMARY KEY (organism_dbxref_id);


--
-- Name: organism_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_pkey PRIMARY KEY (organism_id);


--
-- Name: organismprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_c1 UNIQUE (organism_id, type_id, rank);


--
-- Name: organismprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_pkey PRIMARY KEY (organismprop_id);


--
-- Name: phendesc_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_c1 UNIQUE (genotype_id, environment_id, pub_id);


--
-- Name: phendesc_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_pkey PRIMARY KEY (phendesc_id);


--
-- Name: phenotype_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_c1 UNIQUE (uniquename);


--
-- Name: phenotype_comparison_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_c1 UNIQUE (genotype1_id, environment1_id, genotype2_id, environment2_id, phenotype1_id, type_id, pub_id);


--
-- Name: phenotype_comparison_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pkey PRIMARY KEY (phenotype_comparison_id);


--
-- Name: phenotype_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_c1 UNIQUE (phenotype_id, cvterm_id);


--
-- Name: phenotype_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_pkey PRIMARY KEY (phenotype_cvterm_id);


--
-- Name: phenotype_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_pkey PRIMARY KEY (phenotype_id);


--
-- Name: phenstatement_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_c1 UNIQUE (genotype_id, phenotype_id, environment_id, type_id, pub_id);


--
-- Name: phenstatement_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_pkey PRIMARY KEY (phenstatement_id);


--
-- Name: project_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY project
    ADD CONSTRAINT project_c1 UNIQUE (name);


--
-- Name: project_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY project
    ADD CONSTRAINT project_pkey PRIMARY KEY (project_id);


--
-- Name: protocol_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_c1 UNIQUE (name);


--
-- Name: protocol_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_pkey PRIMARY KEY (protocol_id);


--
-- Name: protocolparam_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY protocolparam
    ADD CONSTRAINT protocolparam_pkey PRIMARY KEY (protocolparam_id);


--
-- Name: pub_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pub
    ADD CONSTRAINT pub_c1 UNIQUE (uniquename);


--
-- Name: pub_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_c1 UNIQUE (pub_id, dbxref_id);


--
-- Name: pub_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_pkey PRIMARY KEY (pub_dbxref_id);


--
-- Name: pub_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pub
    ADD CONSTRAINT pub_pkey PRIMARY KEY (pub_id);


--
-- Name: pub_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: pub_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_pkey PRIMARY KEY (pub_relationship_id);


--
-- Name: pubauthor_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pubauthor
    ADD CONSTRAINT pubauthor_c1 UNIQUE (pub_id, rank);


--
-- Name: pubauthor_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pubauthor
    ADD CONSTRAINT pubauthor_pkey PRIMARY KEY (pubauthor_id);


--
-- Name: pubprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_c1 UNIQUE (pub_id, type_id, value);


--
-- Name: pubprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_pkey PRIMARY KEY (pubprop_id);


--
-- Name: quantification_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_c1 UNIQUE (name, analysis_id);


--
-- Name: quantification_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_pkey PRIMARY KEY (quantification_id);


--
-- Name: quantification_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: quantification_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_pkey PRIMARY KEY (quantification_relationship_id);


--
-- Name: quantificationprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY quantificationprop
    ADD CONSTRAINT quantificationprop_c1 UNIQUE (quantification_id, type_id, rank);


--
-- Name: quantificationprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY quantificationprop
    ADD CONSTRAINT quantificationprop_pkey PRIMARY KEY (quantificationprop_id);


--
-- Name: study_assay_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY study_assay
    ADD CONSTRAINT study_assay_c1 UNIQUE (study_id, assay_id);


--
-- Name: study_assay_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY study_assay
    ADD CONSTRAINT study_assay_pkey PRIMARY KEY (study_assay_id);


--
-- Name: study_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_c1 UNIQUE (name);


--
-- Name: study_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_pkey PRIMARY KEY (study_id);


--
-- Name: studydesign_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY studydesign
    ADD CONSTRAINT studydesign_pkey PRIMARY KEY (studydesign_id);


--
-- Name: studydesignprop_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY studydesignprop
    ADD CONSTRAINT studydesignprop_c1 UNIQUE (studydesign_id, type_id, rank);


--
-- Name: studydesignprop_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY studydesignprop
    ADD CONSTRAINT studydesignprop_pkey PRIMARY KEY (studydesignprop_id);


--
-- Name: studyfactor_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY studyfactor
    ADD CONSTRAINT studyfactor_pkey PRIMARY KEY (studyfactor_id);


--
-- Name: studyfactorvalue_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY studyfactorvalue
    ADD CONSTRAINT studyfactorvalue_pkey PRIMARY KEY (studyfactorvalue_id);


--
-- Name: synonym_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_c1 UNIQUE (name, type_id);


--
-- Name: synonym_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_pkey PRIMARY KEY (synonym_id);


--
-- Name: tableinfo_c1; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY tableinfo
    ADD CONSTRAINT tableinfo_c1 UNIQUE (name);


--
-- Name: tableinfo_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY tableinfo
    ADD CONSTRAINT tableinfo_pkey PRIMARY KEY (tableinfo_id);


--
-- Name: treatment_pkey; Type: CONSTRAINT; Schema: public; Owner: nassar; Tablespace: 
--

ALTER TABLE ONLY treatment
    ADD CONSTRAINT treatment_pkey PRIMARY KEY (treatment_id);


SET search_path = godb, pg_catalog;

--
-- Name: db_idx1; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX db_idx1 ON db USING btree (id);


--
-- Name: db_idx2; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX db_idx2 ON db USING btree (name);


--
-- Name: db_idx3; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX db_idx3 ON db USING btree (fullname);


--
-- Name: db_idx4; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX db_idx4 ON db USING btree (datatype);


--
-- Name: db_idx5; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX db_idx5 ON db USING btree (url_syntax);


--
-- Name: dbxref_idx1; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxref_idx1 ON dbxref USING btree (id);


--
-- Name: dbxref_idx2; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxref_idx2 ON dbxref USING btree (xref_dbname);


--
-- Name: dbxref_idx3; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxref_idx3 ON dbxref USING btree (xref_key);


--
-- Name: dbxref_idx4; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxref_idx4 ON dbxref USING btree (xref_keytype);


--
-- Name: dbxref_idx5; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxref_idx5 ON dbxref USING btree (xref_desc);


--
-- Name: go_acc_idx1; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX go_acc_idx1 ON go_acc USING btree (dbxref_id);


--
-- Name: go_acc_idx2; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX go_acc_idx2 ON go_acc USING btree (acc);


--
-- Name: graph_path_idx1; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX graph_path_idx1 ON graph_path USING btree (id);


--
-- Name: graph_path_idx2; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX graph_path_idx2 ON graph_path USING btree (term1_id);


--
-- Name: graph_path_idx3; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX graph_path_idx3 ON graph_path USING btree (term2_id);


--
-- Name: graph_path_idx4; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX graph_path_idx4 ON graph_path USING btree (distance);


--
-- Name: term2term_idx1; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX term2term_idx1 ON term2term USING btree (id);


--
-- Name: term2term_idx2; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX term2term_idx2 ON term2term USING btree (relationship_type_id);


--
-- Name: term2term_idx3; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX term2term_idx3 ON term2term USING btree (term1_id);


--
-- Name: term2term_idx4; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX term2term_idx4 ON term2term USING btree (term2_id);


--
-- Name: term_idx1; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX term_idx1 ON term USING btree (id);


--
-- Name: term_idx2; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX term_idx2 ON term USING btree (acc);


--
-- Name: term_idx3; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX term_idx3 ON term USING btree (name);


--
-- Name: term_idx4; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX term_idx4 ON term USING btree (is_obsolete);


--
-- Name: term_idx5; Type: INDEX; Schema: godb; Owner: nassar; Tablespace: 
--

CREATE INDEX term_idx5 ON term USING btree (is_root);


SET search_path = public, pg_catalog;

--
-- Name: acquisition_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX acquisition_idx1 ON acquisition USING btree (assay_id);


--
-- Name: acquisition_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX acquisition_idx2 ON acquisition USING btree (protocol_id);


--
-- Name: acquisition_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX acquisition_idx3 ON acquisition USING btree (channel_id);


--
-- Name: acquisition_relationship_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX acquisition_relationship_idx1 ON acquisition_relationship USING btree (subject_id);


--
-- Name: acquisition_relationship_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX acquisition_relationship_idx2 ON acquisition_relationship USING btree (type_id);


--
-- Name: acquisition_relationship_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX acquisition_relationship_idx3 ON acquisition_relationship USING btree (object_id);


--
-- Name: acquisitionprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX acquisitionprop_idx1 ON acquisitionprop USING btree (acquisition_id);


--
-- Name: acquisitionprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX acquisitionprop_idx2 ON acquisitionprop USING btree (type_id);


--
-- Name: affymetrixcel_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixcel_idx1 ON affymetrixcel USING btree (mean);


--
-- Name: affymetrixcel_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixcel_idx2 ON affymetrixcel USING btree (sd);


--
-- Name: affymetrixcel_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixcel_idx3 ON affymetrixcel USING btree (pixels);


--
-- Name: affymetrixcel_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixcel_idx4 ON affymetrixcel USING btree (element_id);


--
-- Name: affymetrixcel_idx5; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixcel_idx5 ON affymetrixcel USING btree (quantification_id);


--
-- Name: affymetrixdabg_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixdabg_idx1 ON affymetrixdabg USING btree (element_id);


--
-- Name: affymetrixdabg_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixdabg_idx2 ON affymetrixdabg USING btree (quantification_id);


--
-- Name: affymetrixdabg_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixdabg_idx3 ON affymetrixdabg USING btree (call_p);


--
-- Name: affymetrixdchip_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixdchip_idx1 ON affymetrixdchip USING btree (element_id);


--
-- Name: affymetrixdchip_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixdchip_idx2 ON affymetrixdchip USING btree (quantification_id);


--
-- Name: affymetrixdchip_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixdchip_idx3 ON affymetrixdchip USING btree (signal);


--
-- Name: affymetrixdchip_idx6; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixdchip_idx6 ON affymetrixdchip USING btree (z);


--
-- Name: affymetrixgcrma_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixgcrma_idx1 ON affymetrixgcrma USING btree (element_id);


--
-- Name: affymetrixgcrma_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixgcrma_idx2 ON affymetrixgcrma USING btree (quantification_id);


--
-- Name: affymetrixgcrma_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixgcrma_idx3 ON affymetrixgcrma USING btree (signal);


--
-- Name: affymetrixgcrma_idx6; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixgcrma_idx6 ON affymetrixgcrma USING btree (z);


--
-- Name: affymetrixmas5_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixmas5_idx1 ON affymetrixmas5 USING btree (signal);


--
-- Name: affymetrixmas5_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixmas5_idx2 ON affymetrixmas5 USING btree (call);


--
-- Name: affymetrixmas5_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixmas5_idx3 ON affymetrixmas5 USING btree (call_p);


--
-- Name: affymetrixmas5_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixmas5_idx4 ON affymetrixmas5 USING btree (element_id);


--
-- Name: affymetrixmas5_idx5; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixmas5_idx5 ON affymetrixmas5 USING btree (quantification_id);


--
-- Name: affymetrixmas5_idx6; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixmas5_idx6 ON affymetrixmas5 USING btree (z);


--
-- Name: affymetrixplier_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixplier_idx1 ON affymetrixplier USING btree (element_id);


--
-- Name: affymetrixplier_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixplier_idx2 ON affymetrixplier USING btree (quantification_id);


--
-- Name: affymetrixplier_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixplier_idx3 ON affymetrixplier USING btree (signal);


--
-- Name: affymetrixprobe_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobe_idx1 ON affymetrixprobe USING btree (affymetrixprobeset_id);


--
-- Name: affymetrixprobe_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobe_idx2 ON affymetrixprobe USING btree (name);


--
-- Name: affymetrixprobe_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobe_idx3 ON affymetrixprobe USING btree (feature_id);


--
-- Name: affymetrixprobe_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobe_idx4 ON affymetrixprobe USING btree (dbxref_id);


--
-- Name: affymetrixprobe_idx5; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobe_idx5 ON affymetrixprobe USING btree (arraydesign_id);


--
-- Name: affymetrixprobe_idx6; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobe_idx6 ON affymetrixprobe USING btree (type_id);


--
-- Name: affymetrixprobeset_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobeset_idx1 ON affymetrixprobeset USING btree (name);


--
-- Name: affymetrixprobeset_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobeset_idx2 ON affymetrixprobeset USING btree (feature_id);


--
-- Name: affymetrixprobeset_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobeset_idx3 ON affymetrixprobeset USING btree (dbxref_id);


--
-- Name: affymetrixprobeset_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobeset_idx4 ON affymetrixprobeset USING btree (arraydesign_id);


--
-- Name: affymetrixprobeset_idx5; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobeset_idx5 ON affymetrixprobeset USING btree (type_id);


--
-- Name: affymetrixprobeset_idx6; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE UNIQUE INDEX affymetrixprobeset_idx6 ON affymetrixprobeset USING btree (name, arraydesign_id);


--
-- Name: affymetrixprobeset_idx7; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE UNIQUE INDEX affymetrixprobeset_idx7 ON affymetrixprobeset USING btree (feature_id, arraydesign_id);


--
-- Name: affymetrixprobesetstat_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobesetstat_idx1 ON affymetrixprobesetstat USING btree (element_id);


--
-- Name: affymetrixprobesetstat_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobesetstat_idx2 ON affymetrixprobesetstat USING btree (quantification_id);


--
-- Name: affymetrixprobesetstat_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobesetstat_idx3 ON affymetrixprobesetstat USING btree (mean);


--
-- Name: affymetrixprobesetstat_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobesetstat_idx4 ON affymetrixprobesetstat USING btree (median);


--
-- Name: affymetrixprobesetstat_idx5; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobesetstat_idx5 ON affymetrixprobesetstat USING btree (quartile1);


--
-- Name: affymetrixprobesetstat_idx6; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobesetstat_idx6 ON affymetrixprobesetstat USING btree (quartile3);


--
-- Name: affymetrixprobesetstat_idx7; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobesetstat_idx7 ON affymetrixprobesetstat USING btree (sd);


--
-- Name: affymetrixprobesetstat_idx8; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixprobesetstat_idx8 ON affymetrixprobesetstat USING btree (n);


--
-- Name: affymetrixrma_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixrma_idx1 ON affymetrixrma USING btree (element_id);


--
-- Name: affymetrixrma_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixrma_idx2 ON affymetrixrma USING btree (quantification_id);


--
-- Name: affymetrixrma_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixrma_idx3 ON affymetrixrma USING btree (signal);


--
-- Name: affymetrixrma_idx6; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixrma_idx6 ON affymetrixrma USING btree (z);


--
-- Name: affymetrixsea_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixsea_idx1 ON affymetrixsea USING btree (element_id);


--
-- Name: affymetrixsea_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixsea_idx2 ON affymetrixsea USING btree (quantification_id);


--
-- Name: affymetrixsea_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixsea_idx3 ON affymetrixsea USING btree (signal);


--
-- Name: affymetrixsnp_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixsnp_idx1 ON affymetrixsnp USING btree (call);


--
-- Name: affymetrixsnp_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixsnp_idx2 ON affymetrixsnp USING btree (signal);


--
-- Name: affymetrixsnp_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixsnp_idx4 ON affymetrixsnp USING btree (element_id);


--
-- Name: affymetrixsnp_idx5; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixsnp_idx5 ON affymetrixsnp USING btree (quantification_id);


--
-- Name: affymetrixvsn_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixvsn_idx1 ON affymetrixvsn USING btree (element_id);


--
-- Name: affymetrixvsn_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixvsn_idx2 ON affymetrixvsn USING btree (quantification_id);


--
-- Name: affymetrixvsn_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixvsn_idx3 ON affymetrixvsn USING btree (signal);


--
-- Name: affymetrixvsn_idx6; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX affymetrixvsn_idx6 ON affymetrixvsn USING btree (z);


--
-- Name: analysisfeature_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX analysisfeature_idx1 ON analysisfeature USING btree (feature_id);


--
-- Name: analysisfeature_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX analysisfeature_idx2 ON analysisfeature USING btree (analysis_id);


--
-- Name: analysisprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX analysisprop_idx1 ON analysisprop USING btree (analysis_id);


--
-- Name: analysisprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX analysisprop_idx2 ON analysisprop USING btree (type_id);


--
-- Name: arraydesign_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX arraydesign_idx1 ON arraydesign USING btree (manufacturer_id);


--
-- Name: arraydesign_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX arraydesign_idx2 ON arraydesign USING btree (platformtype_id);


--
-- Name: arraydesign_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX arraydesign_idx3 ON arraydesign USING btree (substratetype_id);


--
-- Name: arraydesign_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX arraydesign_idx4 ON arraydesign USING btree (protocol_id);


--
-- Name: arraydesign_idx5; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX arraydesign_idx5 ON arraydesign USING btree (dbxref_id);


--
-- Name: arraydesignprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX arraydesignprop_idx1 ON arraydesignprop USING btree (arraydesign_id);


--
-- Name: arraydesignprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX arraydesignprop_idx2 ON arraydesignprop USING btree (type_id);


--
-- Name: assay_biomaterial_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assay_biomaterial_idx1 ON assay_biomaterial USING btree (assay_id);


--
-- Name: assay_biomaterial_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assay_biomaterial_idx2 ON assay_biomaterial USING btree (biomaterial_id);


--
-- Name: assay_biomaterial_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assay_biomaterial_idx3 ON assay_biomaterial USING btree (channel_id);


--
-- Name: assay_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assay_idx1 ON assay USING btree (arraydesign_id);


--
-- Name: assay_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assay_idx2 ON assay USING btree (protocol_id);


--
-- Name: assay_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assay_idx3 ON assay USING btree (operator_id);


--
-- Name: assay_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assay_idx4 ON assay USING btree (dbxref_id);


--
-- Name: assay_project_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assay_project_idx1 ON assay_project USING btree (assay_id);


--
-- Name: assay_project_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assay_project_idx2 ON assay_project USING btree (project_id);


--
-- Name: assayprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assayprop_idx1 ON assayprop USING btree (assay_id);


--
-- Name: assayprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX assayprop_idx2 ON assayprop USING btree (type_id);


--
-- Name: binloc_boxrange; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX binloc_boxrange ON featureloc USING rtree (boxrange(fmin, fmax));


--
-- Name: biomaterial_dbxref_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_dbxref_idx1 ON biomaterial_dbxref USING btree (biomaterial_id);


--
-- Name: biomaterial_dbxref_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_dbxref_idx2 ON biomaterial_dbxref USING btree (dbxref_id);


--
-- Name: biomaterial_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_idx1 ON biomaterial USING btree (taxon_id);


--
-- Name: biomaterial_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_idx2 ON biomaterial USING btree (biosourceprovider_id);


--
-- Name: biomaterial_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_idx3 ON biomaterial USING btree (dbxref_id);


--
-- Name: biomaterial_relationship_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_relationship_idx1 ON biomaterial_relationship USING btree (subject_id);


--
-- Name: biomaterial_relationship_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_relationship_idx2 ON biomaterial_relationship USING btree (object_id);


--
-- Name: biomaterial_relationship_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_relationship_idx3 ON biomaterial_relationship USING btree (type_id);


--
-- Name: biomaterial_treatment_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_treatment_idx1 ON biomaterial_treatment USING btree (biomaterial_id);


--
-- Name: biomaterial_treatment_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_treatment_idx2 ON biomaterial_treatment USING btree (treatment_id);


--
-- Name: biomaterial_treatment_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterial_treatment_idx3 ON biomaterial_treatment USING btree (unittype_id);


--
-- Name: biomaterialprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterialprop_idx1 ON biomaterialprop USING btree (biomaterial_id);


--
-- Name: biomaterialprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX biomaterialprop_idx2 ON biomaterialprop USING btree (type_id);


--
-- Name: contact_relationship_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX contact_relationship_idx1 ON contact_relationship USING btree (type_id);


--
-- Name: contact_relationship_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX contact_relationship_idx2 ON contact_relationship USING btree (subject_id);


--
-- Name: contact_relationship_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX contact_relationship_idx3 ON contact_relationship USING btree (object_id);


--
-- Name: control_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX control_idx1 ON control USING btree (type_id);


--
-- Name: control_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX control_idx2 ON control USING btree (assay_id);


--
-- Name: control_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX control_idx3 ON control USING btree (tableinfo_id);


--
-- Name: control_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX control_idx4 ON control USING btree (row_id);


--
-- Name: INDEX cvterm_c1; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON INDEX cvterm_c1 IS 'the OBO identifier is globally unique';


--
-- Name: INDEX cvterm_c2; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON INDEX cvterm_c2 IS 'a name can mean different things in different contexts;
  for example "chromosome" in SO and GO. A name should be unique
  within an ontology/cv. A name may exist twice in a cv, in both
  obsolete and non-obsolete forms - these will be for different
  cvterms with different OBO identifiers; so GO documentation for
  more details on obsoletion';


--
-- Name: cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvterm_dbxref_idx1 ON cvterm_dbxref USING btree (cvterm_id);


--
-- Name: cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvterm_dbxref_idx2 ON cvterm_dbxref USING btree (dbxref_id);


--
-- Name: cvterm_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvterm_idx1 ON cvterm USING btree (cv_id);


--
-- Name: cvterm_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvterm_idx2 ON cvterm USING btree (name);


--
-- Name: cvterm_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvterm_idx3 ON cvterm USING btree (dbxref_id);


--
-- Name: cvterm_relationship_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvterm_relationship_idx1 ON cvterm_relationship USING btree (type_id);


--
-- Name: cvterm_relationship_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvterm_relationship_idx2 ON cvterm_relationship USING btree (subject_id);


--
-- Name: cvterm_relationship_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvterm_relationship_idx3 ON cvterm_relationship USING btree (object_id);


--
-- Name: cvtermpath_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvtermpath_idx1 ON cvtermpath USING btree (type_id);


--
-- Name: cvtermpath_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvtermpath_idx2 ON cvtermpath USING btree (subject_id);


--
-- Name: cvtermpath_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvtermpath_idx3 ON cvtermpath USING btree (object_id);


--
-- Name: cvtermpath_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvtermpath_idx4 ON cvtermpath USING btree (cv_id);


--
-- Name: cvtermprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvtermprop_idx1 ON cvtermprop USING btree (cvterm_id);


--
-- Name: cvtermprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvtermprop_idx2 ON cvtermprop USING btree (type_id);


--
-- Name: cvtermsynonym_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX cvtermsynonym_idx1 ON cvtermsynonym USING btree (cvterm_id);


--
-- Name: dbxref_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxref_idx1 ON dbxref USING btree (db_id);


--
-- Name: dbxref_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxref_idx2 ON dbxref USING btree (accession);


--
-- Name: dbxref_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxref_idx3 ON dbxref USING btree (version);


--
-- Name: dbxrefprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxrefprop_idx1 ON dbxrefprop USING btree (dbxref_id);


--
-- Name: dbxrefprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX dbxrefprop_idx2 ON dbxrefprop USING btree (type_id);


--
-- Name: element_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX element_idx1 ON element USING btree (feature_id);


--
-- Name: element_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX element_idx2 ON element USING btree (arraydesign_id);


--
-- Name: element_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX element_idx3 ON element USING btree (type_id);


--
-- Name: element_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX element_idx4 ON element USING btree (dbxref_id);


--
-- Name: element_relationship_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX element_relationship_idx1 ON element_relationship USING btree (subject_id);


--
-- Name: element_relationship_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX element_relationship_idx2 ON element_relationship USING btree (type_id);


--
-- Name: element_relationship_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX element_relationship_idx3 ON element_relationship USING btree (object_id);


--
-- Name: element_relationship_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX element_relationship_idx4 ON element_relationship USING btree (value);


--
-- Name: elementresult_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX elementresult_idx1 ON elementresult USING btree (element_id);


--
-- Name: elementresult_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX elementresult_idx2 ON elementresult USING btree (quantification_id);


--
-- Name: elementresult_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX elementresult_idx3 ON elementresult USING btree (signal);


--
-- Name: elementresult_relationship_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX elementresult_relationship_idx1 ON elementresult_relationship USING btree (subject_id);


--
-- Name: elementresult_relationship_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX elementresult_relationship_idx2 ON elementresult_relationship USING btree (type_id);


--
-- Name: elementresult_relationship_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX elementresult_relationship_idx3 ON elementresult_relationship USING btree (object_id);


--
-- Name: elementresult_relationship_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX elementresult_relationship_idx4 ON elementresult_relationship USING btree (value);


--
-- Name: environment_cvterm_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX environment_cvterm_idx1 ON environment_cvterm USING btree (environment_id);


--
-- Name: environment_cvterm_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX environment_cvterm_idx2 ON environment_cvterm USING btree (cvterm_id);


--
-- Name: environment_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX environment_idx1 ON environment USING btree (uniquename);


--
-- Name: expression_cvterm_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX expression_cvterm_idx1 ON expression_cvterm USING btree (expression_id);


--
-- Name: expression_cvterm_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX expression_cvterm_idx2 ON expression_cvterm USING btree (cvterm_id);


--
-- Name: expression_image_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX expression_image_idx1 ON expression_image USING btree (expression_id);


--
-- Name: expression_image_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX expression_image_idx2 ON expression_image USING btree (eimage_id);


--
-- Name: expression_pub_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX expression_pub_idx1 ON expression_pub USING btree (expression_id);


--
-- Name: expression_pub_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX expression_pub_idx2 ON expression_pub USING btree (pub_id);


--
-- Name: INDEX feature_c1; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON INDEX feature_c1 IS 'Any feature can be globally identified
by the combination of organism, uniquename and feature type';


--
-- Name: feature_cvterm_dbxref_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_cvterm_dbxref_idx1 ON feature_cvterm_dbxref USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_dbxref_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_cvterm_dbxref_idx2 ON feature_cvterm_dbxref USING btree (dbxref_id);


--
-- Name: feature_cvterm_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_cvterm_idx1 ON feature_cvterm USING btree (feature_id);


--
-- Name: feature_cvterm_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_cvterm_idx2 ON feature_cvterm USING btree (cvterm_id);


--
-- Name: feature_cvterm_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_cvterm_idx3 ON feature_cvterm USING btree (pub_id);


--
-- Name: feature_cvterm_pub_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_cvterm_pub_idx1 ON feature_cvterm_pub USING btree (feature_cvterm_id);


--
-- Name: feature_cvterm_pub_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_cvterm_pub_idx2 ON feature_cvterm_pub USING btree (pub_id);


--
-- Name: feature_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_cvtermprop_idx1 ON feature_cvtermprop USING btree (feature_cvterm_id);


--
-- Name: feature_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_cvtermprop_idx2 ON feature_cvtermprop USING btree (type_id);


--
-- Name: feature_dbxref_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_dbxref_idx1 ON feature_dbxref USING btree (feature_id);


--
-- Name: feature_dbxref_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_dbxref_idx2 ON feature_dbxref USING btree (dbxref_id);


--
-- Name: feature_expression_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_expression_idx1 ON feature_expression USING btree (expression_id);


--
-- Name: feature_expression_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_expression_idx2 ON feature_expression USING btree (feature_id);


--
-- Name: feature_genotype_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_genotype_idx1 ON feature_genotype USING btree (feature_id);


--
-- Name: feature_genotype_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_genotype_idx2 ON feature_genotype USING btree (genotype_id);


--
-- Name: feature_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_idx1 ON feature USING btree (dbxref_id);


--
-- Name: feature_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_idx2 ON feature USING btree (organism_id);


--
-- Name: feature_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_idx3 ON feature USING btree (type_id);


--
-- Name: feature_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_idx4 ON feature USING btree (uniquename);


--
-- Name: feature_idx5; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_idx5 ON feature USING btree (lower((name)::text));


--
-- Name: feature_name_ind1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_name_ind1 ON feature USING btree (name);


--
-- Name: feature_phenotype_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_phenotype_idx1 ON feature_phenotype USING btree (feature_id);


--
-- Name: feature_phenotype_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_phenotype_idx2 ON feature_phenotype USING btree (phenotype_id);


--
-- Name: feature_pub_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_pub_idx1 ON feature_pub USING btree (feature_id);


--
-- Name: feature_pub_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_pub_idx2 ON feature_pub USING btree (pub_id);


--
-- Name: feature_relationship_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_relationship_idx1 ON feature_relationship USING btree (subject_id);


--
-- Name: feature_relationship_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_relationship_idx2 ON feature_relationship USING btree (object_id);


--
-- Name: feature_relationship_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_relationship_idx3 ON feature_relationship USING btree (type_id);


--
-- Name: feature_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_relationship_pub_idx1 ON feature_relationship_pub USING btree (feature_relationship_id);


--
-- Name: feature_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_relationship_pub_idx2 ON feature_relationship_pub USING btree (pub_id);


--
-- Name: feature_relationshipprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_relationshipprop_idx1 ON feature_relationshipprop USING btree (feature_relationship_id);


--
-- Name: feature_relationshipprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_relationshipprop_idx2 ON feature_relationshipprop USING btree (type_id);


--
-- Name: feature_relationshipprop_pub_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_relationshipprop_pub_idx1 ON feature_relationshipprop_pub USING btree (feature_relationshipprop_id);


--
-- Name: feature_relationshipprop_pub_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_relationshipprop_pub_idx2 ON feature_relationshipprop_pub USING btree (pub_id);


--
-- Name: feature_synonym_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_synonym_idx1 ON feature_synonym USING btree (synonym_id);


--
-- Name: feature_synonym_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_synonym_idx2 ON feature_synonym USING btree (feature_id);


--
-- Name: feature_synonym_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX feature_synonym_idx3 ON feature_synonym USING btree (pub_id);


--
-- Name: INDEX featureloc_c1; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON INDEX featureloc_c1 IS 'locgroup and rank serve to uniquely
partition locations for any one feature';


--
-- Name: featureloc_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featureloc_idx1 ON featureloc USING btree (feature_id);


--
-- Name: featureloc_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featureloc_idx2 ON featureloc USING btree (srcfeature_id);


--
-- Name: featureloc_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featureloc_idx3 ON featureloc USING btree (srcfeature_id, fmin, fmax);


--
-- Name: featuremap_pub_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featuremap_pub_idx1 ON featuremap_pub USING btree (featuremap_id);


--
-- Name: featuremap_pub_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featuremap_pub_idx2 ON featuremap_pub USING btree (pub_id);


--
-- Name: featurepos_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featurepos_idx1 ON featurepos USING btree (featuremap_id);


--
-- Name: featurepos_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featurepos_idx2 ON featurepos USING btree (feature_id);


--
-- Name: featurepos_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featurepos_idx3 ON featurepos USING btree (map_feature_id);


--
-- Name: INDEX featureprop_c1; Type: COMMENT; Schema: public; Owner: nassar
--

COMMENT ON INDEX featureprop_c1 IS 'for any one feature, multivalued
property-value pairs must be differentiated by rank';


--
-- Name: featureprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featureprop_idx1 ON featureprop USING btree (feature_id);


--
-- Name: featureprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featureprop_idx2 ON featureprop USING btree (type_id);


--
-- Name: featureprop_pub_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featureprop_pub_idx1 ON featureprop_pub USING btree (featureprop_id);


--
-- Name: featureprop_pub_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featureprop_pub_idx2 ON featureprop_pub USING btree (pub_id);


--
-- Name: featurerange_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featurerange_idx1 ON featurerange USING btree (featuremap_id);


--
-- Name: featurerange_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featurerange_idx2 ON featurerange USING btree (feature_id);


--
-- Name: featurerange_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featurerange_idx3 ON featurerange USING btree (leftstartf_id);


--
-- Name: featurerange_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featurerange_idx4 ON featurerange USING btree (leftendf_id);


--
-- Name: featurerange_idx5; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featurerange_idx5 ON featurerange USING btree (rightstartf_id);


--
-- Name: featurerange_idx6; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX featurerange_idx6 ON featurerange USING btree (rightendf_id);


--
-- Name: genotype_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX genotype_idx1 ON genotype USING btree (uniquename);


--
-- Name: library_cvterm_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_cvterm_idx1 ON library_cvterm USING btree (library_id);


--
-- Name: library_cvterm_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_cvterm_idx2 ON library_cvterm USING btree (cvterm_id);


--
-- Name: library_cvterm_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_cvterm_idx3 ON library_cvterm USING btree (pub_id);


--
-- Name: library_feature_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_feature_idx1 ON library_feature USING btree (library_id);


--
-- Name: library_feature_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_feature_idx2 ON library_feature USING btree (feature_id);


--
-- Name: library_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_idx1 ON library USING btree (organism_id);


--
-- Name: library_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_idx2 ON library USING btree (type_id);


--
-- Name: library_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_idx3 ON library USING btree (uniquename);


--
-- Name: library_name_ind1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_name_ind1 ON library USING btree (name);


--
-- Name: library_pub_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_pub_idx1 ON library_pub USING btree (library_id);


--
-- Name: library_pub_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_pub_idx2 ON library_pub USING btree (pub_id);


--
-- Name: library_synonym_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_synonym_idx1 ON library_synonym USING btree (synonym_id);


--
-- Name: library_synonym_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_synonym_idx2 ON library_synonym USING btree (library_id);


--
-- Name: library_synonym_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX library_synonym_idx3 ON library_synonym USING btree (pub_id);


--
-- Name: libraryprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX libraryprop_idx1 ON libraryprop USING btree (library_id);


--
-- Name: libraryprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX libraryprop_idx2 ON libraryprop USING btree (type_id);


--
-- Name: magedocumentation_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX magedocumentation_idx1 ON magedocumentation USING btree (mageml_id);


--
-- Name: magedocumentation_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX magedocumentation_idx2 ON magedocumentation USING btree (tableinfo_id);


--
-- Name: magedocumentation_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX magedocumentation_idx3 ON magedocumentation USING btree (row_id);


--
-- Name: organism_dbxref_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX organism_dbxref_idx1 ON organism_dbxref USING btree (organism_id);


--
-- Name: organism_dbxref_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX organism_dbxref_idx2 ON organism_dbxref USING btree (dbxref_id);


--
-- Name: organismprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX organismprop_idx1 ON organismprop USING btree (organism_id);


--
-- Name: organismprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX organismprop_idx2 ON organismprop USING btree (type_id);


--
-- Name: phendesc_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phendesc_idx1 ON phendesc USING btree (genotype_id);


--
-- Name: phendesc_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phendesc_idx2 ON phendesc USING btree (environment_id);


--
-- Name: phendesc_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phendesc_idx3 ON phendesc USING btree (pub_id);


--
-- Name: phenotype_cvterm_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phenotype_cvterm_idx1 ON phenotype_cvterm USING btree (phenotype_id);


--
-- Name: phenotype_cvterm_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phenotype_cvterm_idx2 ON phenotype_cvterm USING btree (cvterm_id);


--
-- Name: phenotype_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phenotype_idx1 ON phenotype USING btree (cvalue_id);


--
-- Name: phenotype_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phenotype_idx2 ON phenotype USING btree (observable_id);


--
-- Name: phenotype_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phenotype_idx3 ON phenotype USING btree (attr_id);


--
-- Name: phenstatement_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phenstatement_idx1 ON phenstatement USING btree (genotype_id);


--
-- Name: phenstatement_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX phenstatement_idx2 ON phenstatement USING btree (phenotype_id);


--
-- Name: protocol_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX protocol_idx1 ON protocol USING btree (type_id);


--
-- Name: protocol_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX protocol_idx2 ON protocol USING btree (pub_id);


--
-- Name: protocol_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX protocol_idx3 ON protocol USING btree (dbxref_id);


--
-- Name: protocolparam_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX protocolparam_idx1 ON protocolparam USING btree (protocol_id);


--
-- Name: protocolparam_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX protocolparam_idx2 ON protocolparam USING btree (datatype_id);


--
-- Name: protocolparam_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX protocolparam_idx3 ON protocolparam USING btree (unittype_id);


--
-- Name: pub_dbxref_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX pub_dbxref_idx1 ON pub_dbxref USING btree (pub_id);


--
-- Name: pub_dbxref_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX pub_dbxref_idx2 ON pub_dbxref USING btree (dbxref_id);


--
-- Name: pub_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX pub_idx1 ON pub USING btree (type_id);


--
-- Name: pub_relationship_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX pub_relationship_idx1 ON pub_relationship USING btree (subject_id);


--
-- Name: pub_relationship_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX pub_relationship_idx2 ON pub_relationship USING btree (object_id);


--
-- Name: pub_relationship_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX pub_relationship_idx3 ON pub_relationship USING btree (type_id);


--
-- Name: pubauthor_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX pubauthor_idx2 ON pubauthor USING btree (pub_id);


--
-- Name: pubprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX pubprop_idx1 ON pubprop USING btree (pub_id);


--
-- Name: pubprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX pubprop_idx2 ON pubprop USING btree (type_id);


--
-- Name: quantification_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX quantification_idx1 ON quantification USING btree (acquisition_id);


--
-- Name: quantification_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX quantification_idx2 ON quantification USING btree (operator_id);


--
-- Name: quantification_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX quantification_idx3 ON quantification USING btree (protocol_id);


--
-- Name: quantification_idx4; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX quantification_idx4 ON quantification USING btree (analysis_id);


--
-- Name: quantification_relationship_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX quantification_relationship_idx1 ON quantification_relationship USING btree (subject_id);


--
-- Name: quantification_relationship_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX quantification_relationship_idx2 ON quantification_relationship USING btree (type_id);


--
-- Name: quantification_relationship_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX quantification_relationship_idx3 ON quantification_relationship USING btree (object_id);


--
-- Name: quantificationprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX quantificationprop_idx1 ON quantificationprop USING btree (quantification_id);


--
-- Name: quantificationprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX quantificationprop_idx2 ON quantificationprop USING btree (type_id);


--
-- Name: study_assay_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX study_assay_idx1 ON study_assay USING btree (study_id);


--
-- Name: study_assay_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX study_assay_idx2 ON study_assay USING btree (assay_id);


--
-- Name: study_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX study_idx1 ON study USING btree (contact_id);


--
-- Name: study_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX study_idx2 ON study USING btree (pub_id);


--
-- Name: study_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX study_idx3 ON study USING btree (dbxref_id);


--
-- Name: studydesign_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX studydesign_idx1 ON studydesign USING btree (study_id);


--
-- Name: studydesignprop_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX studydesignprop_idx1 ON studydesignprop USING btree (studydesign_id);


--
-- Name: studydesignprop_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX studydesignprop_idx2 ON studydesignprop USING btree (type_id);


--
-- Name: studyfactor_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX studyfactor_idx1 ON studyfactor USING btree (studydesign_id);


--
-- Name: studyfactor_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX studyfactor_idx2 ON studyfactor USING btree (type_id);


--
-- Name: studyfactorvalue_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX studyfactorvalue_idx1 ON studyfactorvalue USING btree (studyfactor_id);


--
-- Name: studyfactorvalue_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX studyfactorvalue_idx2 ON studyfactorvalue USING btree (assay_id);


--
-- Name: synonym_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX synonym_idx1 ON synonym USING btree (type_id);


--
-- Name: treatment_idx1; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX treatment_idx1 ON treatment USING btree (biomaterial_id);


--
-- Name: treatment_idx2; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX treatment_idx2 ON treatment USING btree (type_id);


--
-- Name: treatment_idx3; Type: INDEX; Schema: public; Owner: nassar; Tablespace: 
--

CREATE INDEX treatment_idx3 ON treatment USING btree (protocol_id);


--
-- Name: acquisition_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_channel_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_channel_id_fkey FOREIGN KEY (channel_id) REFERENCES channel(channel_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY acquisition
    ADD CONSTRAINT acquisition_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisition_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY acquisition_relationship
    ADD CONSTRAINT acquisition_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisitionprop_acquisition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY acquisitionprop
    ADD CONSTRAINT acquisitionprop_acquisition_id_fkey FOREIGN KEY (acquisition_id) REFERENCES acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: acquisitionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY acquisitionprop
    ADD CONSTRAINT acquisitionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: affymetrixcel_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixcel
    ADD CONSTRAINT affymetrixcel_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobe(element_id);


--
-- Name: affymetrixcel_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixcel
    ADD CONSTRAINT affymetrixcel_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixdabg_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixdabg
    ADD CONSTRAINT affymetrixdabg_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixdabg_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixdabg
    ADD CONSTRAINT affymetrixdabg_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixdchip_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixdchip
    ADD CONSTRAINT affymetrixdchip_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixdchip_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixdchip
    ADD CONSTRAINT affymetrixdchip_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixgcrma_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixgcrma
    ADD CONSTRAINT affymetrixgcrma_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixgcrma_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixgcrma
    ADD CONSTRAINT affymetrixgcrma_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixmas5_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixmas5
    ADD CONSTRAINT affymetrixmas5_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixmas5_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixmas5
    ADD CONSTRAINT affymetrixmas5_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixplier_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixplier
    ADD CONSTRAINT affymetrixplier_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixplier_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixplier
    ADD CONSTRAINT affymetrixplier_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixprobe_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobe
    ADD CONSTRAINT affymetrixprobe_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: affymetrixprobe_c5; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobe
    ADD CONSTRAINT affymetrixprobe_c5 FOREIGN KEY (affymetrixprobeset_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixprobe_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobe
    ADD CONSTRAINT affymetrixprobe_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: affymetrixprobe_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobe
    ADD CONSTRAINT affymetrixprobe_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: affymetrixprobe_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobe
    ADD CONSTRAINT affymetrixprobe_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: affymetrixprobeset_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobeset
    ADD CONSTRAINT affymetrixprobeset_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: affymetrixprobeset_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobeset
    ADD CONSTRAINT affymetrixprobeset_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: affymetrixprobeset_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobeset
    ADD CONSTRAINT affymetrixprobeset_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: affymetrixprobeset_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobeset
    ADD CONSTRAINT affymetrixprobeset_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: affymetrixprobesetstat_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobesetstat
    ADD CONSTRAINT affymetrixprobesetstat_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixprobesetstat_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixprobesetstat
    ADD CONSTRAINT affymetrixprobesetstat_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixrma_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixrma
    ADD CONSTRAINT affymetrixrma_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixrma_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixrma
    ADD CONSTRAINT affymetrixrma_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixsea_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixsea
    ADD CONSTRAINT affymetrixsea_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixsnp_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixsnp
    ADD CONSTRAINT affymetrixsnp_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixsnp_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixsnp
    ADD CONSTRAINT affymetrixsnp_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: affymetrixvsn_c1; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixvsn
    ADD CONSTRAINT affymetrixvsn_c1 FOREIGN KEY (element_id) REFERENCES affymetrixprobeset(element_id);


--
-- Name: affymetrixvsn_c2; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY affymetrixvsn
    ADD CONSTRAINT affymetrixvsn_c2 FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id);


--
-- Name: analysisfeature_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisfeature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY analysisfeature
    ADD CONSTRAINT analysisfeature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysisprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY analysisprop
    ADD CONSTRAINT analysisprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_manufacturer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_manufacturer_id_fkey FOREIGN KEY (manufacturer_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_platformtype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_platformtype_id_fkey FOREIGN KEY (platformtype_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesign_substratetype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY arraydesign
    ADD CONSTRAINT arraydesign_substratetype_id_fkey FOREIGN KEY (substratetype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesignprop_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY arraydesignprop
    ADD CONSTRAINT arraydesignprop_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: arraydesignprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY arraydesignprop
    ADD CONSTRAINT arraydesignprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_biomaterial_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_biomaterial_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_biomaterial_channel_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assay_biomaterial
    ADD CONSTRAINT assay_biomaterial_channel_id_fkey FOREIGN KEY (channel_id) REFERENCES channel(channel_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_operator_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_operator_id_fkey FOREIGN KEY (operator_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_project_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assay_project
    ADD CONSTRAINT assay_project_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_project_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assay_project
    ADD CONSTRAINT assay_project_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assay_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assay
    ADD CONSTRAINT assay_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assayprop_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assayprop
    ADD CONSTRAINT assayprop_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: assayprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY assayprop
    ADD CONSTRAINT assayprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_biosourceprovider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_biosourceprovider_id_fkey FOREIGN KEY (biosourceprovider_id) REFERENCES contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_dbxref_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial_dbxref
    ADD CONSTRAINT biomaterial_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES biomaterial(biomaterial_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES biomaterial(biomaterial_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial_relationship
    ADD CONSTRAINT biomaterial_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_taxon_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial
    ADD CONSTRAINT biomaterial_taxon_id_fkey FOREIGN KEY (taxon_id) REFERENCES organism(organism_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_treatment_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_treatment_treatment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_treatment_id_fkey FOREIGN KEY (treatment_id) REFERENCES treatment(treatment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterial_treatment_unittype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterial_treatment
    ADD CONSTRAINT biomaterial_treatment_unittype_id_fkey FOREIGN KEY (unittype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterialprop_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterialprop
    ADD CONSTRAINT biomaterialprop_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: biomaterialprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY biomaterialprop
    ADD CONSTRAINT biomaterialprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY contact_relationship
    ADD CONSTRAINT contact_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: contact_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY contact
    ADD CONSTRAINT contact_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: control_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY control
    ADD CONSTRAINT control_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: control_tableinfo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY control
    ADD CONSTRAINT control_tableinfo_id_fkey FOREIGN KEY (tableinfo_id) REFERENCES tableinfo(tableinfo_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: control_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY control
    ADD CONSTRAINT control_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvterm_dbxref
    ADD CONSTRAINT cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvterm
    ADD CONSTRAINT cvterm_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvterm_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvterm_relationship
    ADD CONSTRAINT cvterm_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_cv_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_cv_id_fkey FOREIGN KEY (cv_id) REFERENCES cv(cv_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_object_id_fkey FOREIGN KEY (object_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermpath_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvtermpath
    ADD CONSTRAINT cvtermpath_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermprop_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvtermprop
    ADD CONSTRAINT cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: cvtermsynonym_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: cvtermsynonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY cvtermsynonym
    ADD CONSTRAINT cvtermsynonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxref_db_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY dbxref
    ADD CONSTRAINT dbxref_db_id_fkey FOREIGN KEY (db_id) REFERENCES db(db_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbxrefprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY dbxrefprop
    ADD CONSTRAINT dbxrefprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_arraydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_arraydesign_id_fkey FOREIGN KEY (arraydesign_id) REFERENCES arraydesign(arraydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES element(element_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES element(element_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY element_relationship
    ADD CONSTRAINT element_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: element_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY element
    ADD CONSTRAINT element_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_element_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY elementresult
    ADD CONSTRAINT elementresult_element_id_fkey FOREIGN KEY (element_id) REFERENCES element(element_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_quantification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY elementresult
    ADD CONSTRAINT elementresult_quantification_id_fkey FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES elementresult(elementresult_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES elementresult(elementresult_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: elementresult_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY elementresult_relationship
    ADD CONSTRAINT elementresult_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: environment_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: environment_cvterm_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY environment_cvterm
    ADD CONSTRAINT environment_cvterm_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: expression_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_cvterm_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_image_eimage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY expression_image
    ADD CONSTRAINT expression_image_eimage_id_fkey FOREIGN KEY (eimage_id) REFERENCES eimage(eimage_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_image_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY expression_image
    ADD CONSTRAINT expression_image_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_pub_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY expression_pub
    ADD CONSTRAINT expression_pub_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: expression_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY expression_pub
    ADD CONSTRAINT expression_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_dbxref_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_cvterm_dbxref
    ADD CONSTRAINT feature_cvterm_dbxref_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_cvterm
    ADD CONSTRAINT feature_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvterm_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_cvterm_pub
    ADD CONSTRAINT feature_cvterm_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_cvtermprop_feature_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_feature_cvterm_id_fkey FOREIGN KEY (feature_cvterm_id) REFERENCES feature_cvterm(feature_cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_cvtermprop
    ADD CONSTRAINT feature_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_dbxref
    ADD CONSTRAINT feature_dbxref_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expression_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_expression
    ADD CONSTRAINT feature_expression_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_expression_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_expression
    ADD CONSTRAINT feature_expression_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_genotype_chromosome_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_chromosome_id_fkey FOREIGN KEY (chromosome_id) REFERENCES feature(feature_id) ON DELETE SET NULL;


--
-- Name: feature_genotype_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: feature_genotype_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;


--
-- Name: feature_genotype_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_genotype
    ADD CONSTRAINT feature_genotype_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: feature_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_phenotype_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_phenotype
    ADD CONSTRAINT feature_phenotype_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;


--
-- Name: feature_phenotype_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_phenotype
    ADD CONSTRAINT feature_phenotype_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: feature_pub_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_pub
    ADD CONSTRAINT feature_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES feature_relationship(feature_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_relationship_pub
    ADD CONSTRAINT feature_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_relationship
    ADD CONSTRAINT feature_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_feature_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_feature_relationship_id_fkey FOREIGN KEY (feature_relationship_id) REFERENCES feature_relationship(feature_relationship_id) ON DELETE CASCADE;


--
-- Name: feature_relationshipprop_pub_feature_relationshipprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_feature_relationshipprop_id_fkey FOREIGN KEY (feature_relationshipprop_id) REFERENCES feature_relationshipprop(feature_relationshipprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_relationshipprop_pub
    ADD CONSTRAINT feature_relationshipprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_relationshipprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_relationshipprop
    ADD CONSTRAINT feature_relationshipprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature_synonym
    ADD CONSTRAINT feature_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY feature
    ADD CONSTRAINT feature_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureloc_srcfeature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featureloc
    ADD CONSTRAINT featureloc_srcfeature_id_fkey FOREIGN KEY (srcfeature_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuremap_pub_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featuremap_pub
    ADD CONSTRAINT featuremap_pub_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuremap_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featuremap_pub
    ADD CONSTRAINT featuremap_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featuremap_unittype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featuremap
    ADD CONSTRAINT featuremap_unittype_id_fkey FOREIGN KEY (unittype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurepos_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featurepos
    ADD CONSTRAINT featurepos_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurepos_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featurepos
    ADD CONSTRAINT featurepos_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurepos_map_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featurepos
    ADD CONSTRAINT featurepos_map_feature_id_fkey FOREIGN KEY (map_feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub_featureprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_featureprop_id_fkey FOREIGN KEY (featureprop_id) REFERENCES featureprop(featureprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featureprop_pub
    ADD CONSTRAINT featureprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featureprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featureprop
    ADD CONSTRAINT featureprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_leftendf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_leftendf_id_fkey FOREIGN KEY (leftendf_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_leftstartf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_leftstartf_id_fkey FOREIGN KEY (leftstartf_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_rightendf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_rightendf_id_fkey FOREIGN KEY (rightendf_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: featurerange_rightstartf_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY featurerange
    ADD CONSTRAINT featurerange_rightstartf_id_fkey FOREIGN KEY (rightstartf_id) REFERENCES feature(feature_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id);


--
-- Name: library_cvterm_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_cvterm
    ADD CONSTRAINT library_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id);


--
-- Name: library_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_feature
    ADD CONSTRAINT library_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_feature_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_feature
    ADD CONSTRAINT library_feature_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id);


--
-- Name: library_pub_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_pub
    ADD CONSTRAINT library_pub_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_pub
    ADD CONSTRAINT library_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_synonym_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_synonym_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_synonym_synonym_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library_synonym
    ADD CONSTRAINT library_synonym_synonym_id_fkey FOREIGN KEY (synonym_id) REFERENCES synonym(synonym_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY library
    ADD CONSTRAINT library_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: libraryprop_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY libraryprop
    ADD CONSTRAINT libraryprop_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: libraryprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY libraryprop
    ADD CONSTRAINT libraryprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: magedocumentation_mageml_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY magedocumentation
    ADD CONSTRAINT magedocumentation_mageml_id_fkey FOREIGN KEY (mageml_id) REFERENCES mageml(mageml_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: magedocumentation_tableinfo_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY magedocumentation
    ADD CONSTRAINT magedocumentation_tableinfo_id_fkey FOREIGN KEY (tableinfo_id) REFERENCES tableinfo(tableinfo_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_dbxref_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY organism_dbxref
    ADD CONSTRAINT organism_dbxref_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY organismprop
    ADD CONSTRAINT organismprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phendesc_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phendesc_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phendesc_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phendesc
    ADD CONSTRAINT phendesc_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_attr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_attr_id_fkey FOREIGN KEY (attr_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_comparison_environment1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment1_id_fkey FOREIGN KEY (environment1_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_environment2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_environment2_id_fkey FOREIGN KEY (environment2_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_genotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype1_id_fkey FOREIGN KEY (genotype1_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_genotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_genotype2_id_fkey FOREIGN KEY (genotype2_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_phenotype1_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype1_id_fkey FOREIGN KEY (phenotype1_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_phenotype2_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_phenotype2_id_fkey FOREIGN KEY (phenotype2_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenotype_comparison_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_comparison
    ADD CONSTRAINT phenotype_comparison_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_cvalue_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_cvalue_id_fkey FOREIGN KEY (cvalue_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL;


--
-- Name: phenotype_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenotype_cvterm_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype_cvterm
    ADD CONSTRAINT phenotype_cvterm_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenotype_observable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenotype
    ADD CONSTRAINT phenotype_observable_id_fkey FOREIGN KEY (observable_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: phenstatement_environment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_environment_id_fkey FOREIGN KEY (environment_id) REFERENCES environment(environment_id) ON DELETE CASCADE;


--
-- Name: phenstatement_genotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_genotype_id_fkey FOREIGN KEY (genotype_id) REFERENCES genotype(genotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE;


--
-- Name: phenstatement_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE;


--
-- Name: phenstatement_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY phenstatement
    ADD CONSTRAINT phenstatement_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: protocol_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocol_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocol_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY protocol
    ADD CONSTRAINT protocol_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocolparam_datatype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY protocolparam
    ADD CONSTRAINT protocolparam_datatype_id_fkey FOREIGN KEY (datatype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocolparam_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY protocolparam
    ADD CONSTRAINT protocolparam_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: protocolparam_unittype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY protocolparam
    ADD CONSTRAINT protocolparam_unittype_id_fkey FOREIGN KEY (unittype_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_dbxref_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY pub_dbxref
    ADD CONSTRAINT pub_dbxref_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY pub_relationship
    ADD CONSTRAINT pub_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pub_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY pub
    ADD CONSTRAINT pub_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubauthor_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY pubauthor
    ADD CONSTRAINT pubauthor_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: pubprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY pubprop
    ADD CONSTRAINT pubprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_acquisition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_acquisition_id_fkey FOREIGN KEY (acquisition_id) REFERENCES acquisition(acquisition_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_operator_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_operator_id_fkey FOREIGN KEY (operator_id) REFERENCES contact(contact_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY quantification
    ADD CONSTRAINT quantification_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantification_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY quantification_relationship
    ADD CONSTRAINT quantification_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantificationprop_quantification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY quantificationprop
    ADD CONSTRAINT quantificationprop_quantification_id_fkey FOREIGN KEY (quantification_id) REFERENCES quantification(quantification_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: quantificationprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY quantificationprop
    ADD CONSTRAINT quantificationprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_assay_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY study_assay
    ADD CONSTRAINT study_assay_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_assay_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY study_assay
    ADD CONSTRAINT study_assay_study_id_fkey FOREIGN KEY (study_id) REFERENCES study(study_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: study_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY study
    ADD CONSTRAINT study_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studydesign_study_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY studydesign
    ADD CONSTRAINT studydesign_study_id_fkey FOREIGN KEY (study_id) REFERENCES study(study_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studydesignprop_studydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY studydesignprop
    ADD CONSTRAINT studydesignprop_studydesign_id_fkey FOREIGN KEY (studydesign_id) REFERENCES studydesign(studydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studydesignprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY studydesignprop
    ADD CONSTRAINT studydesignprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactor_studydesign_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY studyfactor
    ADD CONSTRAINT studyfactor_studydesign_id_fkey FOREIGN KEY (studydesign_id) REFERENCES studydesign(studydesign_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactor_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY studyfactor
    ADD CONSTRAINT studyfactor_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactorvalue_assay_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY studyfactorvalue
    ADD CONSTRAINT studyfactorvalue_assay_id_fkey FOREIGN KEY (assay_id) REFERENCES assay(assay_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: studyfactorvalue_studyfactor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY studyfactorvalue
    ADD CONSTRAINT studyfactorvalue_studyfactor_id_fkey FOREIGN KEY (studyfactor_id) REFERENCES studyfactor(studyfactor_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: synonym_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY synonym
    ADD CONSTRAINT synonym_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: treatment_biomaterial_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY treatment
    ADD CONSTRAINT treatment_biomaterial_id_fkey FOREIGN KEY (biomaterial_id) REFERENCES biomaterial(biomaterial_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: treatment_protocol_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY treatment
    ADD CONSTRAINT treatment_protocol_id_fkey FOREIGN KEY (protocol_id) REFERENCES protocol(protocol_id) ON DELETE SET NULL DEFERRABLE INITIALLY DEFERRED;


--
-- Name: treatment_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nassar
--

ALTER TABLE ONLY treatment
    ADD CONSTRAINT treatment_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

